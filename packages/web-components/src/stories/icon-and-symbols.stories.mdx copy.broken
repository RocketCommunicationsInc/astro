import { extractArgTypes } from '@astrouxds/storybook-addon-docs-stencil'
import { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs'
import { html, render } from 'lit-html'
const args = extractArgTypes('rux-icon')
import ruxIconsJson from './icons.json'

<Meta title="Components/Icons" component="rux-icon" argTypes={args} />

# Icon

Display Icons used in the Astro Design System

## Guidelines

-   [Astro UXDS: Icons and Symbols](https://astrouxds.com/ui-components/icons-and-symbols)

export const Default = (args) => {
    return html`
        <rux-icon
            icon="${args.icon}"
            size="${args.size}"
        ></rux-icon>
    `
}

<Canvas>
    <Story
        args={{
            icon: 'satellite-transmit',
            size: 'normal'
        }}
        parameters={{
            docs: {
                source: {
                    code:
                        '<rux-icon size="normal" icon="satellite-transmit"></rux-icon>',
                },
            },
        }}
        name="Default"
    >
        {Default.bind()}
    </Story>
</Canvas>

## API

<ArgsTable of="rux-icon" />

## Usage

### Customizing the Color

#### Via CSS

Under the hood, all Icons have their fill property set to [currentColor](https://css-tricks.com/cascading-svg-fill-color/)
so you can style them using the CSS `color` property:

```
  <rux-icon icon="settings" style="color: #FFF;"></rux-icon>
```

### Customizing the Size

#### Via the Size Property

The `size` property includes several pre-defined sizes for ease of use:

```
<rux-icon icon="settings" size="extra-small"></rux-icon>
<rux-icon icon="settings" size="small"></rux-icon>
<rux-icon icon="settings" size="normal"></rux-icon>
<rux-icon icon="settings" size="large"></rux-icon>
```

It also accepts any custom size attribute. For example:

```
<rux-icon icon="settings" size="1rem"></rux-icon>
<rux-icon icon="settings" size="20px"></rux-icon>
```

#### Via CSS

You can also manually set the `width` and `height` using CSS.

```
<rux-icon icon="settings" width="1rem" height="1rem"></rux-icon>
```

**NOTE:** Styling via CSS will override the component's `size` property if set.

## All Icons

export const AllIcons = (args) => {
    const displaySection = (section) => {
        return html`
<div class="icon__section">
    <div class="icon-group__header">
        ${section}
        <span class="icon-style">Solid</span>
    </div>
    ${Object.keys(ruxIconsJson[section]).map((category) => {
        return html`
            <div>
                <div class="icon-list">
                    ${Object.values(
                        ruxIconsJson[section][category]
                    ).map((icon) => {
                        const idx = icon.lastIndexOf('/')
                        const name = icon
                            .substring(idx + 1)
                            .replace(/\//g, '-')
                            .replace(/ /g, '-')
                            .replace(/.svg/g, '')
                            .toLowerCase()
                        return html`
                            <div class="icon">
                                <rux-icon
                                    size="normal"
                                    icon="${name}"
                                ></rux-icon>
                                <div class="icon-label">
                                    ${name}
                                </div>
                            </div>
                        `
                    })}
                </div>
                <div></div>
            </div>
        `
    })}
</div>
        `
    }
    return html`
<style>
    .icon {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .icon-label {
        margin-top: 1rem;
        font-size: 0.75rem;
    }
    .icon-style {
        font-size: 1.5rem;
        margin-left: auto;
    }
    .icon-group__header {
        display: flex;
        align-items: center;
        font-size: 3rem;
        font-weight: 400;
        text-align: left;
        text-transform: capitalize;
        margin-bottom: 1rem;
    }
    .icon-list {
        display: grid;
        grid-template-columns: repeat(6, minmax(0, 1fr));
        grid-auto-rows: minmax(70px, auto);
        grid-gap: 1rem;
        padding-bottom: 60px;
    }
    .icon__wrapper {
        padding: 1rem;
    }
</style>
<div class="icon__wrapper">
    ${displaySection('Astro')} ${Object.keys(
        ruxIconsJson
    ).map((section) =>
        section !== 'Astro' ? displaySection(section) : null
    )}
</div>
    `
}

<Canvas>
    <Story
        args={{
            size: 'normal',
        }}
        argTypes={{
            size: { table: { disable: true } },
            icon: { table: { disable: true } }
        }}
        name="All Icons"
    >
        {AllIcons.bind()}
    </Story>
</Canvas>

### Cherry Picking

When cherry picking Icons, you'll need to register both RuxIcon and any individual Icons you wish to use.
For example, if you wanted to use `rux-icon-close` you would import the following:

```js
import { RuxIcon } from '@astrouxds/astro-web-components/dist/components/rux-icon'
import { RuxIconClose } from '@astrouxds/astro-web-components/dist/components/rux-icon-close'
customElements.define('rux-icon', RuxIcon)
customElements.define('rux-icon-close', RuxIconClose)
```
