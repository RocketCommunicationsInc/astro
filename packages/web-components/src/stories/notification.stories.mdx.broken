import { extractArgTypes } from '@astrouxds/storybook-addon-docs-stencil'
import { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs'
import { html, render } from 'lit-html'
const args = extractArgTypes('rux-notification')
args.open.defaultValue = true
args.message.defaultValue =
    'This is a notification banner. It won’t disappear until the user dismisses it.'
args.status.defaultValue = 'standby'

<Meta
    title="Components/Notification"
    component="rux-notification"
    argTypes={args}
    parameters={{
        actions: {
            handles: ['ruxclosed rux-notification'],
        },
    }}
/>

# Notification

Events that deserve user attention, but don’t require a response, may be displayed in a Notification Banner. The Banner displays within the user’s field-of-view, but doesn’t block other interaction.

If the user is currently working in a specific screen area, the Banner may be presented in that area. If the Notification is more general, or doesn’t relate to a specific area of the screen, it may be presented in the center of the screen just below the Global Status Bar.

If another Notification Banner is waiting, it appears when the current Banner is dismissed. Banners don’t stack or group.

## Guidelines

-   [Astro UXDS: Notification Banner](https://www.astrouxds.com/ui-components/notification-banner)

export const Default = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        .hideClose="${args.hideClose}"
        status="${args.status}"
        message="${args.message}"
    ></rux-notification>
</div>
    `
}

<Canvas>
    <Story
        name="Default"
        height="100px"
        args={{
            open: true,
            closeAfter: null,
            message: "This is a notification banner. It won’t disappear until the user dismisses it.",
            status: "standby"
        }}
    >
        {Default.bind()}
    </Story>
</Canvas>

## Usage

### Multiple Notifications

To show multiple notifications, you'll need to create and manage a notification stack within your application code.
Instead of using multiple `rux-notification` elements, you can listen on `ruxclosed` and update a single `rux-notification`
element as the user dismisses the current visible notification.

A very basic pattern would look like:

```html
<rux-notification open id="notification" status="caution">Something caution has happened!</rux-notification>
<script>
    const eventSequence = [
        {
            status: 'critical',
            message: '1 - something critical'
        },
        {
            status: 'normal',
            message: '2 - something normal'
        },
            {
            status: 'normal',
            message: '3 - something normal again'
        }
    ]
    notification.addEventListener('ruxclosed', () => {
        if (eventSequence.length > 0) {
            // Grab the first notification data
            notification.message = eventSequence[0].message
            notification.status = eventSequence[0].status
            // Remove the notification from the stack
            eventSequence.shift()
            // Reopen the notification
            notification.open = true
        }
    })
</script>
```

<a href="https://codepen.io/rocketmark/pen/jOxLLNZ" target="_blank">View on CodePen</a>

## API

<ArgsTable of="rux-notification" />

## Typescript Types
```
import { Status } from '@astrouxds/astro-web-components'
```
**Status**
```
 type Classification =
    | 'cui'
    | 'controlled'
    | 'confidential'
    | 'secret'
    | 'top-secret'
    | 'top-secret-sci'
    | 'unclassified'
```
```
import { StatusSymbol } from '@astrouxds/astro-web-components'
```
**Status Symbol**

```
enum StatusSymbol {
    CRITICAL = 'critical',
    SERIOUS = 'serious',
    CAUTION = 'caution',
    NORMAL = 'normal',
    STANDBY = 'standby',
    OFF = 'off',
}
```


## Variants

### Auto Close

export const NotificationAutoClose = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        .status="${args.status}"
        message="This is a notification banner. It will disappear in 2000 ms."
    ></rux-notification>
</div>
    `
}

<Canvas>
    <Story
        args={{
            open: true,
            closeAfter: 2000,
        }}
        name="Auto Close"
        height="100px"
    >
        {NotificationAutoClose.bind()}
    </Story>
</Canvas>

### Hide Close

In cases like auto close where you don't want to allow the user to be able to manually close the Notification,
you may use the `hide-close` attribute. NOTE: this will override and hide any content inside the `actions` slot.

export const HideClose = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        .status="${args.status}"
        .hideClose="${args.hideClose}"
        message="This is a notification banner. It will disappear in 2000 ms."
    ></rux-notification>
</div>
    `
}

<Canvas>
    <Story
        args={{
            open: true,
            hideClose: true
        }}
        name="Hide Close"
        height="100px"
    >
        {HideClose.bind()}
    </Story>
</Canvas>


### Small

export const Small = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        status="${args.status}"
        message="${args.message}"
        .hideClose="${args.hideClose}"
    ></rux-notification>
</div>
    `
}

<Canvas>
    <Story name="Small" height="100px" args={{ small: true}}>
        {Small.bind()}
    </Story>
</Canvas>

### Prefix Slot

export const PrefixSlot = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        status="${args.status}"
        message="${args.message}"
        .hideClose="${args.hideClose}"
    >
    <rux-classification-marking classification="unclassified" tag slot="prefix"></rux-classification-marking>
    Notification banner
    </rux-notification>
</div>
    `
}

<Canvas>
    <Story name="Prefix Slot" height="100px" args={{ open: true}}>
        {PrefixSlot.bind()}
    </Story>
</Canvas>

### Default Slot

Use the default slot for more control over the content inside your Notification, for example, adding a link
within your message.

> NOTE: Content placed inside the default slot will override the `message` attribute.

export const DefaultSlot = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        status="${args.status}"
        message="${args.message}"
        .hideClose="${args.hideClose}"
    >
    Notification banner
    <a href="#" style="margin-left: 8px">Link</a>
    </rux-notification>
</div>
    `
}

<Canvas>
    <Story name="Default Slot" height="100px" args={{ open: true}}>
        {DefaultSlot.bind()}
    </Story>
</Canvas>


### Actions Slot

The `actions` slot can be used to customize the close icon or to allow additional actions. For example,
instead of using an icon, you may instead pass in a `rux-button`

> NOTE: By default, this slot will contain a `rux-icon` that automatically closes the modal.
> You will be responsible for closing the Notification yourself if you chose to use this slot.

export const ActionsSlot = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        status="${args.status}"
        message="${args.message}"
        .hideClose="${args.hideClose}"
    >
    Notification banner
    <rux-button slot="actions">Acknowledge</rux-button>
    </rux-notification>
</div>
    `
}

<Canvas>
    <Story name="Actions Slot" height="100px" args={{ open: true}}>
        {ActionsSlot.bind()}
    </Story>
</Canvas>



### With Slotted Content

export const WithSlottedContent = (args) => {
    return html`
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        status="${args.status}"
        message="${args.message}"
        .hideClose="${args.hideClose}"
    >
    <rux-classification-marking classification="unclassified" tag slot="prefix"></rux-classification-marking>
    <div>
      Slotted Content
      <a href="#" style="margin-left: 8px">Link</a>
    </div>
    <rux-button slot="actions">Acknowledge</rux-button>
    </rux-notification>
</div>
    `
}

<Canvas>
    <Story name="With Slotted Content" height="100px" args={{ open: true}}>
        {WithSlottedContent.bind()}
    </Story>
</Canvas>

### With Wrapped Text

Text within Notifications is truncated by default. If you need to have text wrap, you can make use
of the `message` CSS Shadow Part to override the following properties:

```
rux-notification::part(message) {
    overflow: visible;
    text-overflow: unset;
    white-space: normal;
}
```

export const WithWrappedText = (args) => {
    return html`
    <style>
    rux-notification::part(message) {
        overflow: visible;
        text-overflow: unset;
        white-space: normal;
    }
    </style>
<div style="display: flex; flex-flow: column; justify-content: center;">
    <rux-notification
        ?open="${args.open}"
        ?small="${args.small}"
        .closeAfter="${args.closeAfter}"
        status="${args.status}"
        message="${args.message}"
        .hideClose="${args.hideClose}"
    >
        In my younger and more vulnerable years my father gave me some advice that I’ve been
        turning over in my mind ever since. “Whenever you feel like criticizing any one,”
        he told me, “just remember that all the people in this world haven’t had the advantages
        that you’ve had.”
    </rux-notification>
</div>
    `
}

<Canvas>
    <Story name="With Wrapped Content" height="100px" args={{ open: true, status: 'normal'}}>
        {WithWrappedText.bind()}
    </Story>
</Canvas>


### All Variants

export const AllVariants = () => html`
    <style>
        .wrapper {
            margin-bottom: 1rem;
        }
    </style>
    <section>
     <div class="wrapper">
            <rux-notification open status="normal">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
          <div class="wrapper wrapper--small">
            <rux-notification open small status="normal">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper">
            <rux-notification open status="caution">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper wrapper--small">
            <rux-notification open small status="caution">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper">
            <rux-notification open status="serious">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper wrapper--small">
            <rux-notification open small status="serious">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper">
            <rux-notification open status="critical">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper wrapper--small">
            <rux-notification open small status="critical">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper">
            <rux-notification open status="standby">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper wrapper--small">
            <rux-notification open small status="standby">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper">
            <rux-notification open status="off">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper wrapper--small">
            <rux-notification open small status="off">
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper">
            <rux-notification open>
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
        <div class="wrapper wrapper--small">
            <rux-notification open small>
                Notification banner
                <a href="#" style="margin-left: 8px">Link</a>
            </rux-notification>
        </div>
    </section>
`

<Canvas>
    <Story
        name="All Variants"
        argTypes={{
            closeAfter: { table: { disable: true } },
            message: { table: { disable: true } },
            open: { table: { disable: true } },
            status: { table: { disable: true } }
        }}
    >
        {AllVariants.bind()}
    </Story>
</Canvas>

## Cherry Picking

If you're already utilizing a build system that supports tree shaking and want to only import this individual component:

```js
import { RuxNotification } from '@astrouxds/astro-web-components/dist/components/rux-notification'
import { RuxIcon } from '@astrouxds/astro-web-components/dist/components/rux-icon'
import { RuxIconClear } from '@astrouxds/astro-web-components/dist/components/rux-icon-clear'
customElements.define('rux-notification', RuxNotification)
customElements.define('rux-icon', RuxIcon)
customElements.define('rux-icon-clear', RuxIconClear)
```
