To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil's core imports with Lit's.
2.  **Class Definition**: Extend `LitElement` and use `@customElement` decorator for the tag.
3.  **Properties**: Use Lit's `@property` decorator.
4.  **Rendering**: Replace `h` with Lit's `html` tagged template literal, and use the `unsafeHTML` directive to inject the SVG string.
5.  **Shadow DOM**: Lit components default to using the Shadow DOM. Your Stencil component had `shadow: false`, meaning it rendered into the Light DOM. For most web components, especially icons, Shadow DOM is beneficial for encapsulation. The Lit version below will use Shadow DOM by default. If you *strictly* need Light DOM rendering, you would override `createRenderRoot` (see note below the code).

Here's the converted LitElement component:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // Import for injecting raw SVG HTML

import svgIcon from '../../../icons/battery-90.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

// Use @customElement decorator to define the tag name
@customElement('rux-icon-battery-90')
export class RuxIconBattery90 extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    // Define component styles. For this icon, styles are primarily inline,
    // but you can add base styles for the host or internal elements here.
    static styles = css`
        :host {
            display: inline-flex; /* Ensures the component respects its content size */
            align-items: center;
            justify-content: center;
            /* Optional: Add any base styling for the icon container */
        }
        div {
            /* Any common styles for the div wrapper if needed */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        /* Styles for the SVG itself if needed (e.g., color) */
        svg {
            display: block; /* Remove extra space below SVG */
        }
    `;

    render() {
        // Construct the inline style string
        const inlineStyle = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Use Lit's html template literal and unsafeHTML to inject the SVG string
        return html`
            <div style="${inlineStyle}">${unsafeHTML(svgIcon)}</div>
        `;
    }

    // If you explicitly need the component to render into the Light DOM (like Stencil's shadow: false)
    // you would override createRenderRoot(). However, for most Lit components, especially icons,
    // rendering into the Shadow DOM (the default behavior) is preferred for encapsulation.
    // createRenderRoot() {
    //   return this; // Render to Light DOM
    // }
}
```