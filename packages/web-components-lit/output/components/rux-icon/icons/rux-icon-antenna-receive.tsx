Okay, here's the conversion from Stencil.js to LitElement.

I've made the following changes:

1.  **Imports**: Replaced Stencil imports with `LitElement`, `html`, and `css` from `lit`.
2.  **Class Definition**: Extended `LitElement`.
3.  **`@Component` to `static styles` and `customElements.define`**:
    *   Lit components are registered using `customElements.define`.
    *   CSS is defined in the `static styles` property using the `css` tagged template literal. I've moved the inline style logic into the CSS and used CSS variables for sizing, which is generally more idiomatic for Lit/web components.
4.  **`@Prop` to `static properties`**: The `Prop` decorator is replaced by the `static properties` getter, where each property is defined with its type (e.g., `String`).
5.  **`render()` method**:
    *   The `h` function (JSX) is replaced with Lit's `html` tagged template literal.
    *   Instead of `innerHTML`, Lit's `html` template literal can directly include string content.
    *   Sizing logic is now handled more elegantly using CSS variables and a computed style.

```typescript
import { LitElement, html, css } from 'lit'
import { customElement, property } from 'lit/decorators.js' // Recommended for decorators
import svgIcon from '../../../icons/antenna-receive.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-antenna-receive')
export class RuxIconAntennaReceive extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto'

    static styles = css`
        :host {
            display: inline-block; /* Ensure the host element takes only the necessary space */
        }
        div {
            /* Default icon size if --icon-size is not set */
            --icon-size: var(--rux-icon-size, auto);
            height: var(--icon-size);
            width: var(--icon-size);
            line-height: 1; /* Prevent extra space due to line-height */
            display: flex; /* Helps vertically align SVG if needed */
            align-items: center; /* Center SVG */
            justify-content: center; /* Center SVG */
        }
    `

    // Helper to compute the CSS variable value for icon size
    get _iconSizeValue(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }
        return sizes[this.size] || this.size
    }

    render() {
        // Set the CSS variable for the icon size
        // We use a style map to dynamically apply the custom property to the div
        const styleMap = {
            '--icon-size': this._iconSizeValue,
        }

        return html`<div style=${this._getStyle(styleMap)} .innerHTML=${svgIcon}></div>`
    }

    // Helper to apply the style map. This is a common Lit pattern.
    // It's more robust than concatenating strings for style attributes.
    private _getStyle(styleObject: Record<string, string>): string {
        return Object.entries(styleObject)
            .map(([prop, value]) => `${prop}: ${value};`)
            .join(' ')
    }
}
```

**Key Differences and Improvements:**

1.  **CSS Encapsulation**: Lit's `static styles` provides true Shadow DOM style encapsulation by default (unless `shadowRoot` is `false`, but for icons, you generally want encapsulation). Stencil's `shadow: false` means it wouldn't encapsulate. If you strictly need `shadow: false` behavior for Lit, you can set `createRenderRoot()`:
    ```typescript
    // In RuxIconAntennaReceive class
    createRenderRoot() {
        return this; // Render to light DOM
    }
    ```
    However, for icons, Shadow DOM is usually preferred for encapsulation. I've assumed you want the default Shadow DOM behavior unless specified.

2.  **Styling**:
    *   Instead of directly setting `height` and `width` on the `div` in `render()`, we define CSS rules within `static styles` and use a CSS custom property (`--icon-size`). This is a more idiomatic and flexible way to handle dynamic styling in web components.
    *   The `_iconSizeValue` getter now computes the correct CSS value, which is then passed to the `div` via the `--icon-size` custom property.
    *   The `_getStyle` helper is a common pattern in Lit to apply dynamic styles from a JavaScript object.

3.  **SVG Injection**: `.innerHTML=${svgIcon}` directly injects the SVG string, similar to the Stencil version.

This LitElement version is more aligned with standard web component practices and Lit's recommended patterns for styling and property handling.