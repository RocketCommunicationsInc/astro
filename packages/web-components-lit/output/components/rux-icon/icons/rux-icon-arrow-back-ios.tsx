To convert your Stencil.js component to LitElement, we need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with Lit-specific ones (`LitElement`, `html`, `css`, `property` decorator, `unsafeHTML` directive, `styleMap` directive).
2.  **Class Definition**: Extend `LitElement` instead of just being a plain class.
3.  **Properties**: Convert `@Prop()` decorators to Lit's `@property()` decorator.
4.  **Shadow DOM**: The Stencil component specifies `shadow: false`, meaning it renders to the light DOM. LitElement defaults to shadow DOM, so we'll need to override `createRenderRoot()` to achieve the same light DOM rendering.
5.  **Styles**: Lit uses `static styles` for component-scoped CSS. When rendering to light DOM, these styles become global. We'll use `static styles` for `:host` rules (to style the custom element itself) and `styleMap` for inline dynamic styles on the `div`.
6.  **Render Method**: Replace Stencil's `h()` function with Lit's `html` template literal. Use `unsafeHTML` to inject the SVG string and `styleMap` for dynamic styles.
7.  **Component Registration**: Manually call `customElements.define` to register the web component.

Here's the converted LitElement code:

```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js'; // For @property decorator
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // For rendering raw HTML string
import { styleMap } from 'lit/directives/style-map.js'; // For applying style objects
import svgIcon from '../../../icons/arrow-back-ios.svg'; // Assuming this imports the SVG content as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconArrowBackIos extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Overrides LitElement's default behavior to render the component's template directly into its light DOM,
     * mimicking Stencil's `shadow: false`.
     * Note: If you do this, `static styles` will be injected globally.
     * So, only use `static styles` for `:host` selector here if needed,
     * or ensure global CSS rules handle styling for internal elements.
     */
    createRenderRoot() {
        return this;
    }

    // Static styles are applied to the custom element itself.
    // Since we're rendering to light DOM, any styles for internal elements
    // would become global if placed here, so it's best to use inline styles or
    // rely on global CSS for `div` and `svg`.
    static styles = css`
        :host {
            /* Common for icon components to ensure correct layout within text flow */
            display: inline-block;
            vertical-align: middle;
            line-height: 1; /* Prevents extra space below the icon */
        }
    `;

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
            display: 'block', // The div wrapper usually wants to be block inside the inline-block host
        };

        // For an SVG imported as a string, unsafeHTML is used to inject the raw SVG markup.
        // styleMap applies the dynamic width/height to the div.
        return html`<div style=${styleMap(style)} .innerHTML=${unsafeHTML(svgIcon)}></div>`;
    }
}

// Register the custom element with the browser.
// The check `!customElements.get()` prevents errors if the component is imported multiple times.
if (!customElements.get('rux-icon-arrow-back-ios')) {
    customElements.define('rux-icon-arrow-back-ios', RuxIconArrowBackIos);
}
```