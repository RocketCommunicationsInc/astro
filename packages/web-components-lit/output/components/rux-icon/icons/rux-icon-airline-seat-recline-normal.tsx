To convert your Stencil.js component to LitElement, we'll make the following changes:

1.  **Imports**: Replace Stencil-specific imports with Lit's `LitElement`, `html`, and decorator imports.
2.  **Component Decorator**: Replace `@Component` with `@customElement`.
3.  **Property Decorator**: Replace `@Prop` with Lit's `@property`.
4.  **Shadow DOM**: Since `shadow: false` was used in Stencil (meaning it renders to the light DOM), we'll override Lit's `createRenderRoot` method to return `this` instead of creating a shadow root.
5.  **Render Method**: Convert the JSX syntax within the `render()` method to Lit's `html` template literal syntax.
6.  **Style Binding**: Apply inline styles directly using string interpolation within the `style` attribute.
7.  **`innerHTML` Binding**: Use Lit's property binding (`.innerHTML=`) for setting inner HTML.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js'; // For @customElement and @property decorators
import svgIcon from '../../../icons/airline-seat-recline-normal.svg'; // Path remains the same

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-airline-seat-recline-normal')
export class RuxIconAirlineSeatReclineNormal extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) // Specify type as String for Lit's property system
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * By default, LitElement creates a shadow DOM.
     * The original Stencil component had `shadow: false`, meaning it rendered to the light DOM.
     * To match that behavior, we override `createRenderRoot` to return `this`.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // In Lit, we apply styles directly as string attributes in the template literal.
        // Property binding for innerHTML is done using a leading dot: .innerHTML
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};" .innerHTML="${svgIcon}"></div>
        `;
    }
}
```