Okay, let's convert this Stencil.js component to LitElement.

The key differences will be:
1.  **Imports:** Using `LitElement`, `html`, `css` from `lit` and decorators like `property`, `customElement` from `lit/decorators.js`.
2.  **Component Definition:** Extending `LitElement` and using `@customElement` instead of `@Component`.
3.  **Properties:** Using `@property()` instead of `@Prop()`.
4.  **Rendering:** Using Lit's `html` tagged template literal instead of Stencil's `h` (hyperscript) or JSX. We'll also use `unsafeSVG` from `lit/directives/unsafe-svg.js` for safely injecting the SVG string.
5.  **Shadow DOM:** Stencil had `shadow: false`. Lit defaults to Shadow DOM. To match the Stencil behavior, we'll override `createRenderRoot` to render to the light DOM.

Here's the converted LitElement code:

```typescript
import { html, LitElement } from 'lit';
import { property, customElement } from 'lit/decorators.js';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js'; // Required for injecting raw SVG string
import svgIcon from '../../../icons/arrow-drop-down.svg'; // Assuming your bundler handles SVG imports as strings

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-arrow-drop-down')
export class RuxIconArrowDropDown extends LitElement {
    /**
     * To match Stencil's `shadow: false`, we render to the light DOM.
     * If you want to use Lit's default Shadow DOM encapsulation (recommended for web components),
     * you can remove this method.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this; // Renders to light DOM
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Lit uses tagged template literals for rendering.
        // Inline styles are applied directly.
        // unsafeSVG is used to securely inject the raw SVG string.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeSVG(svgIcon)}
            </div>
        `;
    }
}
```

### Explanation of Changes:

1.  **`import { html, LitElement } from 'lit';`**: Imports the base class for your component and the `html` tagged template literal function for rendering.
2.  **`import { property, customElement } from 'lit/decorators.js';`**: Imports decorators needed for defining properties and registering the custom element.
3.  **`import { unsafeSVG } from 'lit/directives/unsafe-svg.js';`**: This is crucial. `unsafeSVG` is a Lit directive that allows you to render raw SVG strings from untrusted sources. Since `svgIcon` is a string containing raw SVG markup, this is the recommended way to inject it into the template.
4.  **`@customElement('rux-icon-arrow-drop-down')`**: This decorator registers your class as a custom element with the given tag name, replacing Stencil's `@Component({ tag: ... })`.
5.  **`export class RuxIconArrowDropDown extends LitElement {`**: Your component now extends `LitElement`.
6.  **`protected createRenderRoot(): Element | ShadowRoot { return this; }`**: This method overrides Lit's default behavior. By returning `this`, the component renders its content directly into the Light DOM, effectively mimicking Stencil's `shadow: false`. If you prefer the encapsulation of Shadow DOM (which is generally recommended for Web Components), you can simply remove this method.
7.  **`@property({ type: String })`**: This decorator declares `size` as a reactive property. `type: String` helps Lit optimize updates and type conversions.
8.  **`render() { ... return html`...`; }`**: The `render` method returns a `html` tagged template literal.
    *   `style="height: ${this.iconSize}; width: ${this.iconSize};"`: Inline styles are applied directly using template literals for dynamic values.
    *   `${unsafeSVG(svgIcon)}`: This injects the SVG content.

This LitElement component provides the same functionality as your original Stencil.js component.