To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with LitElement ones (`LitElement`, `html`, `css`, `property`, `unsafeHTML`).
2.  **Class Definition**: Extend `LitElement` and remove the `@Component` decorator.
3.  **Properties**: Replace `@Prop()` with `@property()`.
4.  **Styling**:
    *   LitElement uses Shadow DOM by default, which is generally recommended for encapsulation. Stencil had `shadow: false`. If you explicitly need light DOM rendering, you would implement `createRenderRoot()`. For an icon component, Shadow DOM is usually fine and often preferred.
    *   Define component-level styles using `static styles = css``.
    *   Inline styles (`style={style}` in Stencil) translate directly to the `style` attribute in Lit's `html` template.
5.  **Rendering**: Replace Stencil's `h` function with Lit's `html` tagged template literal. Use `unsafeHTML` directive to insert the SVG string.
6.  **Custom Element Registration**: Manually define the custom element using `customElements.define`.

Here's the converted LitElement component:

```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';

import svgIcon from '../../../icons/bookmark.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconBookmark extends LitElement {
    // LitElement uses Shadow DOM by default, providing encapsulation.
    // If you explicitly needed to render to the light DOM (like Stencil's `shadow: false`),
    // you would add: `createRenderRoot() { return this; }`

    static styles = css`
        :host {
            display: inline-block; /* Ensures the component respects text flow but can be sized */
            line-height: 1; /* Prevents extra space below the icon if in a line of text */
        }
        div {
            display: flex; /* Centers the SVG within its container */
            align-items: center;
            justify-content: center;
            /* Dimensions (height/width) are applied via inline style for dynamic sizing */
        }
        div svg {
            display: block; /* Removes extra space typically below inline elements */
            width: 100%; /* Makes the SVG fill its container */
            height: 100%; /* Makes the SVG fill its container */
            fill: currentColor; /* Allows the SVG's color to be controlled by CSS 'color' property */
        }
    `;

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`;

        return html`<div style="${style}">${unsafeHTML(svgIcon)}</div>`;
    }
}

// Define the custom element. This is typically done once for each component.
// The `if` condition prevents re-definition errors in development environments
// where modules might be hot-reloaded.
if (!customElements.get('rux-icon-bookmark')) {
    customElements.define('rux-icon-bookmark', RuxIconBookmark);
}
```