To convert the Stencil.js component to LitElement, we'll replace Stencil-specific decorators and rendering with their Lit counterparts.

Key changes:
1.  **Imports**: Replace Stencil imports with Lit's `LitElement`, `html`, `css`, `customElement`, and `property`.
2.  **Component Decorator**: Replace `@Component` with `@customElement` and extend `LitElement`.
3.  **Shadow DOM**: Stencil's `shadow: false` means the component renders into the light DOM (its own element container). Lit elements default to using Shadow DOM. To replicate Stencil's `shadow: false` behavior, we need to override Lit's `createRenderRoot` method to return `this` (the element itself) instead of a new `ShadowRoot`.
4.  **Properties**: Replace `@Prop()` with `@property()`.
5.  **Render Method**: Replace Stencil's `h` (JSX-like) syntax with Lit's `html` tagged template literal. Inline styles and `innerHTML` are handled slightly differently in Lit's templates.

Here's the converted LitElement code:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import svgIcon from '../../../icons/arrow-upward.svg'; // Assuming this imports the SVG content as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-arrow-upward')
export class RuxIconArrowUpward extends LitElement {
    // Stencil's `shadow: false` means content renders directly into the element.
    // In Lit, we override createRenderRoot to achieve this "light DOM" rendering.
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: any } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Lit uses tagged template literals for rendering.
        // Inline styles are set directly using template expressions.
        // `innerHTML` is set using a property binding `.innerHTML`.
        return html`
            <div
                style="height: ${this.iconSize}; width: ${this.iconSize};"
                .innerHTML="${svgIcon}"
            ></div>
        `;
    }

    // You might want to add static styles for the component if needed,
    // though for simple light DOM injection, it might not be strictly necessary.
    // If you were using Shadow DOM (Lit's default), static styles would be common.
    // static styles = css`
    //   /* Add any component-specific styles here */
    // `;
}
```