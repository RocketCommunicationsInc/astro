Okay, let's convert this Stencil.js component to LitElement.

The key differences to address are:
1.  **Imports**: `Component`, `Prop`, `h` are replaced by `LitElement`, `html`, and `css` (though `css` isn't strictly needed here since `shadow: false` and inline styles are used).
2.  **Decorators**: `@Component` and `@Prop` are replaced by `extends LitElement` and `static properties = {}`.
3.  **Shadow DOM**: `shadow: false` in Stencil means the component renders into the light DOM. In Lit, the default is shadow DOM. To mimic `shadow: false`, we need to override `createRenderRoot()`.
4.  **`h` JSX Factory**: Stencil's `h` (or direct JSX) is replaced by Lit's `html` tagged template literal.
5.  **`innerHTML`**: For inserting raw SVG strings, Lit recommends using the `unsafeHTML` directive to explicitly mark it as safe.

Here's the LitElement version:

```typescript
import { LitElement, html } from 'lit';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import svgIcon from '../../../icons/all-inbox.svg'; // Assuming your build system handles SVG imports as raw strings

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAllInbox extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    static properties = {
        size: { type: String },
    };

    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Stencil's `shadow: false` means the component renders into the light DOM.
     * To achieve the same in LitElement, we override `createRenderRoot()`
     * to return the element itself, rather than a shadow root.
     */
    createRenderRoot() {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Inline styles are applied directly in the template
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}

// Define the custom element
customElements.define('rux-icon-all-inbox', RuxIconAllInbox);
```