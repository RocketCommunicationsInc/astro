Okay, here's the conversion of your Stencil.js component to LitElement.

Key changes:

1.  **Imports**: Replaced Stencil imports with `LitElement`, `html`, and `property` from `lit`, and `unsafeSVG` from `lit/directives/unsafe-svg.js` (needed for injecting SVG strings securely).
2.  **Component Definition**:
    *   Instead of `@Component`, the class `extends LitElement`.
    *   The `tag` from Stencil's `@Component` is now handled by `customElements.define` at the end of the file.
    *   `shadow: false` is achieved by overriding `createRenderRoot()` to return `this`, making the component render directly into the light DOM.
3.  **Properties**: `@Prop()` becomes `@property()`.
4.  **`render()` method**:
    *   Returns `html` template literal instead of JSX.
    *   Dynamic styles (`height`, `width`) are applied directly in the `style` attribute using template literals.
    *   `innerHTML={svgIcon}` is replaced with `${unsafeSVG(svgIcon)}` for securely inserting the SVG string.

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js';

import svgIcon from '../../../icons/access-time.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAccessTime extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // To render to the light DOM (equivalent to Stencil's shadow: false)
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Lit uses template literals for rendering.
        // Styles are applied directly to the element using attribute binding.
        // unsafeSVG is used to inject the raw SVG string safely.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeSVG(svgIcon)}
            </div>
        `;
    }
}

// Define the custom element
customElements.define('rux-icon-access-time', RuxIconAccessTime);
```

**To use this:**

1.  Make sure you have Lit installed:
    `npm install lit` or `yarn add lit`
2.  Ensure your build process (e.g., Webpack, Rollup) is configured to handle `lit` modules and potentially `.svg` file imports (if `svgIcon` is processed by a loader that converts it to a string).