To convert the Stencil.js component to LitElement, we'll make the following changes:

1.  **Imports**: Replace Stencil imports with Lit's `LitElement`, `html`, `css`, `customElement`, and `property`. We'll also need `unsafeHTML` from `lit/directives/unsafe-html.js` for injecting the SVG string.
2.  **Class Definition**: Extend `LitElement` and use the `@customElement` decorator instead of `@Component`.
3.  **Properties**: Replace `@Prop()` with `@property()`.
4.  **Styling**: Convert the inline style object to Lit's `static styles` using `css` tagged template literals for better encapsulation and performance. The `height` and `width` will still be dynamic based on `iconSize`.
5.  **Rendering**: Replace Stencil's `h()` function with Lit's `html` tagged template literal. Use `unsafeHTML` to inject the SVG string into the `div`.

Here's the converted code:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import svgIcon from '../../../icons/border-left.svg'; // Assuming this imports the SVG content as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-border-left')
export class RuxIconBorderLeft extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    static styles = css`
        :host {
            display: inline-flex; /* Makes the custom element behave like an inline element */
            align-items: center;
            justify-content: center;
        }

        /* The div acts as a container for the SVG, whose size is controlled by the 'size' prop */
        div {
            display: inline-flex; /* Ensures the SVG is centered if it doesn't fill the div exactly */
            align-items: center;
            justify-content: center;
        }

        /* Styles for the SVG itself, ensuring it fills its parent div */
        div > svg {
            display: block; /* Remove any extra spacing */
            width: 100%;
            height: 100%;
        }
    `;

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        // Return the mapped size, or the original value if not found in the map
        return sizes[this.size] || this.size;
    }

    render() {
        // Apply dynamic height and width to the container div using style attribute binding.
        // The static styles ensure the SVG inside scales correctly.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}
```