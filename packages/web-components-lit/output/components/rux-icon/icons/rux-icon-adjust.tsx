To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil imports with Lit imports (`LitElement`, `customElement`, `property`, `html`, `unsafeHTML`).
2.  **Class Definition**: Extend `LitElement`.
3.  **Decorators**:
    *   `@Component({ tag: 'rux-icon-adjust', shadow: false })` becomes `@customElement('rux-icon-adjust')` and you'll explicitly handle `shadow: false`.
    *   `@Prop()` becomes `@property()`.
4.  **Rendering**: Stencil's `h` function is replaced by Lit's `html` tagged template literal. `innerHTML` is replaced by the `unsafeHTML` directive.
5.  **Shadow DOM**: Stencil's `shadow: false` means the component renders its content directly into the custom element in the light DOM. Lit components by default render into a Shadow DOM. To match Stencil's `shadow: false`, you need to override Lit's `createRenderRoot()` method.

Here's the converted code:

```typescript
import { LitElement, html, property, customElement } from 'lit';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // Import unsafeHTML for injecting raw SVG content

import svgIcon from '../../../icons/adjust.svg'; // Assumes your build system processes .svg files into strings

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-adjust')
export class RuxIconAdjust extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Stencil's `shadow: false` means the component's template is rendered directly into the element's light DOM,
     * rather than into a Shadow DOM. To achieve this in Lit, we override `createRenderRoot` to return `this`.
     *
     * If you prefer the default Lit behavior (rendering to Shadow DOM for encapsulation),
     * you can remove this method.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this; // Render to the light DOM, matching Stencil's shadow: false
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Use Lit's `html` tagged template literal for rendering.
        // Use `unsafeHTML` directive to inject the SVG string, similar to Stencil's `innerHTML`.
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`;

        return html`<div style="${style}">${unsafeHTML(svgIcon)}</div>`;
    }
}
```