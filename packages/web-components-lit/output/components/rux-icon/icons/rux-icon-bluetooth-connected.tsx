Okay, let's convert this Stencil.js component to LitElement.

Key changes:
1.  **Imports:** Replace Stencil imports (`Component`, `Prop`, `h`) with Lit's (`LitElement`, `html`, `customElement`, `property`).
2.  **Component Definition:** Extend `LitElement` and use the `@customElement` decorator.
3.  **Shadow DOM:** Stencil's `shadow: false` needs to be explicitly handled in Lit by overriding `createRenderRoot` to return `this`.
4.  **Properties:** `@Prop()` becomes `@property()`.
5.  **Rendering:** Stencil's JSX `h` function (or implicit JSX) is replaced by Lit's `html` template literal function. Dynamic styles are best handled with Lit's `styleMap` directive for object-based styles. `innerHTML` becomes `.innerHTML`.

Here's the converted code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js'; // For dynamic styles
import svgIcon from '../../../icons/bluetooth-connected.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-bluetooth-connected')
export class RuxIconBluetoothConnected extends LitElement {
    /**
     * By default, LitElement uses shadow DOM.
     * To disable shadow DOM (equivalent to Stencil's `shadow: false`),
     * we override `createRenderRoot` to return the element itself.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Use styleMap for cleaner object-based dynamic styles
        const iconStyle = styleMap({
            height: this.iconSize,
            width: this.iconSize,
        });

        // Use .innerHTML for setting innerHTML safely in Lit
        return html`<div style=${iconStyle} .innerHTML=${svgIcon}></div>`;
    }
}
```