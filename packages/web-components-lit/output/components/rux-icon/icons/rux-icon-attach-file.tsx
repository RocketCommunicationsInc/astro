Okay, let's convert this Stencil.js component to LitElement.

Key changes:
*   `@stencil/core` is replaced with `lit` imports.
*   `@Component` properties like `tag` and `shadow` are handled differently. `tag` is handled by `customElements.define`, and `shadow: false` is achieved by overriding `createRenderRoot`.
*   `@Prop` becomes `@property`.
*   `h` (hyperscript/JSX in Stencil) is replaced with Lit's `html` tagged template literal.
*   `innerHTML` is replaced by Lit's `unsafeHTML` directive for injecting raw SVG.
*   Styles are applied inline or could be moved to `static styles = css` if desired for more complex styling (though inline is fine for this case).

```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // For injecting raw SVG

import svgIcon from '../../../icons/attach-file.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAttachFile extends LitElement {
    // To disable Shadow DOM (equivalent to Stencil's shadow: false)
    // The component's content will render directly into the light DOM.
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Lit uses tagged template literals for rendering.
        // We apply inline styles directly using template literals.
        // unsafeHTML is used to render the raw SVG string.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}

// Define the custom element
customElements.define('rux-icon-attach-file', RuxIconAttachFile);
```