To convert the Stencil.js component to LitElement, we'll make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with Lit-specific ones (`LitElement`, `html`) and decorator imports (`customElement`, `property`). We'll also need `unsafeHTML` for injecting the SVG string.
2.  **Class Definition**:
    *   Extend `LitElement`.
    *   Use the `@customElement` decorator to register the component tag.
    *   To mimic Stencil's `shadow: false` (rendering to light DOM), we'll override the `createRenderRoot` method in Lit to return `this`.
3.  **Properties**: Replace `@Prop()` with Lit's `@property()` decorator.
4.  **Render Method**: Replace Stencil's `h` (hyperscript) syntax with Lit's `html` tagged template literals. The `innerHTML` property will be handled using the `unsafeHTML` directive from Lit.

Here's the converted LitElement component:

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js' // Required for injecting raw SVG string

import svgIcon from '../../../icons/arrow-right.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-arrow-right')
export class RuxIconArrowRight extends LitElement {
    // To match Stencil's `shadow: false`, we render to the light DOM.
    // Remove this method if you prefer to use Lit's default Shadow DOM behavior.
    createRenderRoot() {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        const iconHeight = this.iconSize
        const iconWidth = this.iconSize

        // Apply inline styles directly in the template literal,
        // and use unsafeHTML to inject the SVG string.
        return html`
            <div style="height: ${iconHeight}; width: ${iconWidth};">
                ${unsafeHTML(svgIcon)}
            </div>
        `
    }
}
```