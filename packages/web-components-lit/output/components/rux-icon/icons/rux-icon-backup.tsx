Okay, here's the Stencil.js component converted to LitElement.

Key changes:
1.  **Imports**: Switched from `@stencil/core` to `lit` and `lit/decorators.js` for core Lit functionality and decorators.
2.  **Base Class**: `RuxIconBackup` now extends `LitElement`.
3.  **Component Decorator**: `@Component` becomes `@customElement`.
4.  **Prop Decorator**: `@Prop()` becomes `@property()`. The `type: String` is added for explicit type handling by Lit's reactive properties system.
5.  **Shadow DOM**: Stencil's `shadow: false` is handled in Lit by overriding the `createRenderRoot()` method to return `this`. This makes the component render directly into its own light DOM.
6.  **`render` Method**:
    *   Stencil's `h` (hyperscript) is replaced with Lit's `html` tagged template literal.
    *   Inline styles are applied using the `styleMap` directive for object-based styles.
    *   `innerHTML` is replaced by the `unsafeHTML` directive, which is required when injecting raw HTML/SVG strings.

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { styleMap } from 'lit/directives/style-map.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js'
import svgIcon from '../../../icons/backup.svg' // Ensure your build setup correctly imports SVG as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-backup')
export class RuxIconBackup extends LitElement {
    /**
     * LitElement components default to using Shadow DOM.
     * To match Stencil's `shadow: false`, we override `createRenderRoot` to render into the light DOM.
     */
    protected createRenderRoot(): Element | DocumentFragment {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        // Using styleMap for object-based styles and unsafeHTML for injecting the SVG string.
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`
    }
}
```