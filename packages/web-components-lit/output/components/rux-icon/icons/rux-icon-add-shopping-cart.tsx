To convert your Stencil.js component to LitElement, we'll replace Stencil-specific decorators and rendering logic with their Lit counterparts.

Key changes include:
1.  **Imports**: Swapping `@stencil/core` with `lit` and `lit/decorators.js`.
2.  **Component Definition**: Extending `LitElement` and using `static properties` and `static styles`.
3.  **Properties**: Using the `@property()` decorator instead of `@Prop()`.
4.  **Rendering**: Using Lit's `html` template literal and directives like `styleMap` for dynamic CSS.
5.  **Shadow DOM**: Stencil's `shadow: false` means it renders into the light DOM. Lit's default is to render into the shadow DOM. For an icon component, rendering into the shadow DOM is generally preferred for encapsulation. If you strictly need it to render into the light DOM (i.e., directly into its host element), you would add `createRenderRoot() { return this; }`. This example assumes the default Lit shadow DOM behavior is acceptable, as it's often beneficial for components.

Here's the converted LitElement component:

```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';

// Assuming this import correctly provides the SVG content as a string
import svgIcon from '../../../icons/add-shopping-cart.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAddShoppingCart extends LitElement {
    static styles = css`
        :host {
            display: inline-block; /* Ensures the component behaves like text flow */
            vertical-align: middle; /* Aligns with text baseline */
            line-height: 1; /* Prevents extra space due to line-height */
            /* Add any default styling for the host element here */
        }
        /* Styles for the inner div wrapping the SVG */
        div {
            display: flex; /* Helps center the SVG if needed, and applies dimensions */
            align-items: center;
            justify-content: center;
            /* The actual size will be applied via inline styleMap */
        }
        /* Basic SVG styling to ensure it fits the container */
        div > svg {
            width: 100%;
            height: 100%;
            display: block; /* Removes extra space below inline elements */
        }
    `;

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Computes the effective size for the icon in CSS units (rem, px, etc.)
     */
    get iconSizeValue(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        return sizes[this.size] || this.size;
    }

    render() {
        // Create a style object for the inner div, using the computed icon size
        const iconStyles = {
            height: this.iconSizeValue,
            width: this.iconSizeValue,
        };

        // Use Lit's html template literal and styleMap directive
        // .innerHTML is used to inject the SVG string directly.
        return html`
            <div style=${styleMap(iconStyles)} .innerHTML=${svgIcon}></div>
        `;
    }
}

// Define the custom element
customElements.define('rux-icon-add-shopping-cart', RuxIconAddShoppingCart);
```