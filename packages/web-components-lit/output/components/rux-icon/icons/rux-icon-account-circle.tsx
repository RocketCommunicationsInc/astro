```typescript
import { LitElement, html, customElement, property } from 'lit';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import { styleMap } from 'lit/directives/style-map.js';

import svgIcon from '../../../icons/account-circle.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-account-circle')
export class RuxIconAccountCircle extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Stencil's `shadow: false` means the component renders into its light DOM.
     * In LitElement, the default is to render into a Shadow DOM.
     * To mimic Stencil's `shadow: false` behavior, we override `createRenderRoot`
     * to return the element itself, causing content to be rendered into its light DOM.
     * If true Shadow DOM encapsulation is desired for this component, remove this method.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        };

        // In Lit, we use `html` tagged template literals.
        // `innerHTML` content is passed using the `unsafeHTML` directive to securely render raw HTML strings.
        // Dynamic styles are applied using the `styleMap` directive.
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`;
    }
}
```