```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import svgIcon from '../../../icons/brightness-3.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-brightness-3')
export class RuxIconBrightness3 extends LitElement {
    // Stencil's `shadow: false` means the component renders to the light DOM.
    // LitElement by default uses Shadow DOM. To match Stencil's behavior,
    // we override `createRenderRoot` to render to the light DOM.
    // If Shadow DOM is desired for encapsulation, remove this method.
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            // If the size is not a predefined key, use it as a custom value directly.
            return this.size;
        }
    }

    render() {
        // Lit's html template literal is used for rendering.
        // Inline styles are applied directly using string interpolation.
        // The `.` prefix in `.innerHTML` is Lit's way of setting a DOM property,
        // which is perfect for injecting the SVG string.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};" .innerHTML=${svgIcon}></div>
        `;
    }
}
```