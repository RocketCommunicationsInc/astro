To convert the Stencil.js component to LitElement, we need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with Lit-specific imports (`LitElement`, `html`, `customElement`, `property`).
2.  **Class Extension**: Extend `LitElement`.
3.  **Decorator Conversion**:
    *   `@Component({ tag: 'rux-icon-add-to-home-screen', shadow: false })` becomes `@customElement('rux-icon-add-to-home-screen')`.
    *   The `shadow: false` in Stencil means it renders into the light DOM. Lit components render into the Shadow DOM by default. To match the Stencil behavior, we need to override Lit's `createRenderRoot()` method to return `this`.
    *   `@Prop()` becomes `@property()`.
4.  **Rendering**:
    *   Stencil's JSX (`h` function implicitly used) becomes Lit's `html` tagged template literal.
    *   `innerHTML={svgIcon}` becomes `unsafeHTML(svgIcon)` from `lit/directives/unsafe-html.js`.
    *   `style={style}` where `style` is an object becomes `style=${styleMap(style)}` from `lit/directives/style-map.js` for dynamic inline styles.

Here's the converted LitElement component:

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js'
import { styleMap } from 'lit/directives/style-map.js' // Needed for applying style objects

import svgIcon from '../../../icons/add-to-home-screen.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-add-to-home-screen')
export class RuxIconAddToHomeScreen extends LitElement {
    // Stencil's shadow: false means the component renders into the Light DOM.
    // To replicate this in Lit, override createRenderRoot to return `this`.
    protected createRenderRoot(): Element | ShadowRoot {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        // Use styleMap for applying a dynamic style object
        // Use unsafeHTML to render the SVG string as HTML
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`
    }
}
```