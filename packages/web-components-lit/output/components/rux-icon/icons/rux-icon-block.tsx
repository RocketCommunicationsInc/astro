Okay, let's convert this Stencil.js component to LitElement.

Here are the key changes and considerations:

1.  **Imports:** Replace Stencil imports with Lit imports (`LitElement`, `html`, `css`, `customElement`, `property`, `unsafeHTML`).
2.  **Decorators:**
    *   `@Component` becomes `@customElement('tag-name')`.
    *   `@Prop` becomes `@property()`.
3.  **Shadow DOM:** Stencil's `shadow: false` means it renders into the light DOM. Lit's default is shadow DOM. To replicate `shadow: false`, you need to override `createRenderRoot()` to return `this`.
4.  **`render()` Method:**
    *   Lit's `render()` method returns a `TemplateResult` created by the `html` tagged template literal.
    *   JSX (`<div ...></div>`) is replaced by backticks and `${}` for expressions.
    *   `innerHTML` is handled by the `unsafeHTML` directive from `lit/directives/unsafe-html.js`.

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js' // For injecting SVG string safely

import svgIcon from '../../../icons/block.svg' // Assuming this correctly imports the SVG content as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-block')
export class RuxIconBlock extends LitElement {
    // To match Stencil's `shadow: false`, render into the light DOM
    createRenderRoot() {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        // Lit handles inline styles directly within the template literal
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `
    }
}
```