To convert your Stencil.js component to LitElement, we'll replace Stencil's decorators and rendering logic with Lit's equivalents.

Key changes:
*   `@stencil/core` imports replaced by `lit` and `lit/decorators.js`.
*   `@Component` replaced by extending `LitElement` and defining `static properties`.
*   `@Prop()` replaced by `@property()`.
*   `h` (JSX equivalent) replaced by Lit's `html` tagged template literal.
*   `innerHTML` is handled using Lit's `unsafeHTML` directive to insert raw HTML strings.
*   Dynamic styles are handled using Lit's `styleMap` directive for cleaner code.
*   A `customElements.define` call is added to register the web component.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import { styleMap } from 'lit/directives/style-map.js'; // Import styleMap for dynamic styles
import svgIcon from '../../../icons/accessibility-new.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAccessibilityNew extends LitElement {
    // Lit elements, by default, render into a Shadow DOM.
    // The original Stencil component had `shadow: false`, which means it rendered into the light DOM.
    // If you explicitly need to render into the light DOM, uncomment the following method:
    /*
    protected createRenderRoot(): Element | DocumentFragment {
        return this; // This makes the component render directly into its host element (light DOM)
    }
    */

    /**
     * Define component properties.
     * The `property` decorator automatically handles reactive updates when the property changes.
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * A getter that computes the icon's size based on the `size` property.
     * This logic remains the same as in the Stencil component.
     */
    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    /**
     * The render method returns a Lit `TemplateResult` using the `html` tagged template literal.
     */
    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        };

        // `styleMap(style)` applies the dynamic styles from the `style` object.
        // `unsafeHTML(svgIcon)` securely injects the SVG string into the div.
        // It's crucial that `svgIcon` contains valid, trusted SVG markup.
        return html`<div style="${styleMap(style)}">
            ${unsafeHTML(svgIcon)}
        </div>`;
    }
}

// Register the custom element with the browser.
// This is essential for the component to be usable in HTML.
customElements.define('rux-icon-accessibility-new', RuxIconAccessibilityNew);
```