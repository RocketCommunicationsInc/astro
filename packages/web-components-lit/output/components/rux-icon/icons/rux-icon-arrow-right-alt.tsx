To convert the Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil imports (`Component`, `Prop`, `h`) with Lit imports (`LitElement`, `html`, `css` if needed, and `customElement`, `property` decorators).
2.  **Class Extension**: The component class must extend `LitElement`.
3.  **Component Registration**: Use the `@customElement` decorator to define the tag name.
4.  **Properties**: Convert `@Prop()` decorators to `@property()` decorators, specifying the `type`.
5.  **Render Method**: Convert the `h()` function call to Lit's `html` template literal. Inline styles are applied as a string to the `style` attribute, and `innerHTML` is set using a property binding (`.innerHTML`).

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js' // Use decorators for properties and custom element registration

import svgIcon from '../../../icons/arrow-right-alt.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-arrow-right-alt') // Replaces @Component({ tag: 'rux-icon-arrow-right-alt' })
export class RuxIconArrowRightAlt extends LitElement { // Extend LitElement

    // Stencil's `shadow: false` means no shadow DOM.
    // In Lit, if you do not define a `static styles` getter, the component renders to the light DOM by default,
    // achieving the same effect as `shadow: false`.

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) // Replaces @Prop()
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize() {
        const sizes: { [key: string]: any } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        // Construct the style string for inline application
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`

        // Use Lit's html template literal.
        // `style` attribute takes a string.
        // `.innerHTML` is a property binding for injecting the SVG content.
        return html`<div style="${style}" .innerHTML="${svgIcon}"></div>`
    }
}
```

**Key Changes Explained:**

1.  **`import { LitElement, html } from 'lit'`**: Imports the base class for Lit components and the `html` tag function for templates.
2.  **`import { customElement, property } from 'lit/decorators.js'`**: Imports the decorators from Lit to simplify component definition and property declaration.
3.  **`@customElement('rux-icon-arrow-right-alt')`**: This decorator replaces Stencil's `@Component({ tag: 'rux-icon-arrow-right-alt' })`. It automatically defines the custom element in the browser.
4.  **`export class RuxIconArrowRightAlt extends LitElement`**: Your component class now extends `LitElement`.
5.  **`@property({ type: String })`**: This decorator replaces Stencil's `@Prop()`.
    *   `type: String` tells Lit how to convert the attribute value to the property value (and vice-versa if reflection is enabled, though not needed here).
6.  **`shadow: false` equivalent**: In Stencil, `shadow: false` means the component renders to the light DOM. In Lit, if you *don't* define a `static styles` getter, the component defaults to rendering to the light DOM, achieving the same behavior.
7.  **`render()` method**:
    *   Instead of returning an `h()` call, you return an `html` template literal.
    *   Inline styles are applied as a string directly to the `style` attribute (e.g., `style="height: ${this.iconSize}; width: ${this.iconSize};"`).
    *   The `innerHTML` property is set using a property binding: `.innerHTML="${svgIcon}"`. The leading dot (`.`) signifies that it's binding to a DOM *property* rather than an HTML attribute.