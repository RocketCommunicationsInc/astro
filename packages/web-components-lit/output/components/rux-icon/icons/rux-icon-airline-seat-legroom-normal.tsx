To convert the Stencil.js component to LitElement, we need to address the following:

1.  **Imports**: Replace Stencil's `@stencil/core` imports with Lit's `lit` and `lit/decorators.js`.
2.  **Component Definition**: Replace the `@Component` decorator with `@customElement` and extend `LitElement`.
3.  **Shadow DOM**: The original Stencil component has `shadow: false`, meaning it renders into the Light DOM. Lit elements render into Shadow DOM by default. To match the Stencil behavior, we need to override `createRenderRoot()` in the Lit component to return `this`.
4.  **Props**: Convert Stencil's `@Prop()` decorator to Lit's `@property()` decorator.
5.  **`h` function and JSX**: Stencil uses `h` for rendering JSX/TSX. Lit uses tagged template literals with `html`.
6.  **Inline Styles**: The Stencil component builds a style *object* and applies it. In Lit's `html` template, the `style` attribute expects a string. We'll convert the style object into a string.
7.  **`innerHTML`**: The `innerHTML` property binding works similarly in Lit's `html` template.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';

// Assuming svgIcon is imported as a string containing the SVG content.
// This relies on your build system (e.g., Webpack, Rollup) to convert
// .svg files into string exports.
import svgIcon from '../../../icons/airline-seat-legroom-normal.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-airline-seat-legroom-normal')
export class RuxIconAirlineSeatLegroomNormal extends LitElement {
    /**
     * Override createRenderRoot to render into the light DOM instead of shadow DOM.
     * This mimics Stencil's `shadow: false` behavior.
     */
    createRenderRoot(): HTMLElement {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Convert the style object from Stencil to an inline style string for Lit's html template.
        const inlineStyle = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Apply the inline style and use the .innerHTML property binding to inject the SVG string.
        return html`
            <div style="${inlineStyle}" .innerHTML="${svgIcon}"></div>
        `;
    }
}
```