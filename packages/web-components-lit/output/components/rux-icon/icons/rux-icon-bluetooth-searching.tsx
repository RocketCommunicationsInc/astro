Okay, let's convert this Stencil.js component to LitElement.

Here's a breakdown of the changes and why they're made:

1.  **Imports:**
    *   `@stencil/core` is replaced with `lit` and `lit/decorators.js` (for `@customElement` and `@property`).
    *   We also import `styleMap` from `lit/directives/style-map.js` for applying inline styles safely and reactively.

2.  **Component Decorator (`@Component` to `@customElement`):**
    *   `@Component({ tag: 'rux-icon-bluetooth-searching', shadow: false })` becomes `@customElement('rux-icon-bluetooth-searching')`.

3.  **Shadow DOM (`shadow: false`):**
    *   Stencil's `shadow: false` means the component renders into the "light DOM" (itself) rather than a Shadow Root.
    *   LitElement by default uses Shadow DOM. To replicate `shadow: false`, we override the `createRenderRoot()` method to return `this`.

4.  **Property Decorator (`@Prop` to `@property`):**
    *   `@Prop()` becomes `@property({ type: String })`. We specify `type: String` because Lit uses this for type conversion when attributes are set from HTML.

5.  **Base Class:**
    *   The class now `extends LitElement`.

6.  **`render()` method:**
    *   Instead of `h` or JSX, Lit uses `html` tagged template literals.
    *   `style={style}` becomes `style=${styleMap(style)}`. This is the recommended Lit way to bind an object of styles, making it reactive and efficient.
    *   `innerHTML={svgIcon}` becomes `.innerHTML=${svgIcon}`. The `.` prefix in Lit bindings indicates a property binding, which is generally what you want when setting DOM properties like `innerHTML`.

Here's the converted code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js'; // For applying styles as an object
import svgIcon from '../../../icons/bluetooth-searching.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-bluetooth-searching')
export class RuxIconBluetoothSearching extends LitElement {
    // Stencil's `shadow: false` means the component renders directly into the light DOM.
    // To replicate this in LitElement, we override createRenderRoot to return `this`.
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize() {
        const sizes: { [key: string]: string } = { // Changed `any` to `string` as values are strings
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        };

        return html`<div style=${styleMap(style)} .innerHTML=${svgIcon}></div>`;
    }
}
```