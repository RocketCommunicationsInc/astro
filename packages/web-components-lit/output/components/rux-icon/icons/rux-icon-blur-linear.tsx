Okay, here's the Stencil.js icon component converted to LitElement.

Key changes:

1.  **Imports**: Switched from `@stencil/core` to `lit` and `lit/decorators.js` (for `@property`) and `lit/directives/unsafe-html.js` (for inserting the SVG string safely).
2.  **Component Definition**:
    *   Instead of `@Component`, we extend `LitElement`.
    *   The tag name is defined using `customElements.define()`.
3.  **Properties**: `@Prop()` becomes `@property()`. We explicitly set `type: String` for the `size` property.
4.  **Shadow DOM**: The original Stencil component had `shadow: false`. Lit defaults to Shadow DOM. To maintain the original behavior (rendering in Light DOM), we implement `createRenderRoot()`.
5.  **Rendering**:
    *   `h` (Stencil's JSX factory) is replaced by Lit's `html` tagged template literal.
    *   `innerHTML={svgIcon}` is replaced by `>${unsafeHTML(svgIcon)}<` using the `unsafeHTML` directive to insert the raw SVG string.
    *   Inline styles are applied directly using a template literal for the `style` attribute.

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';

// Assuming this path is correct relative to the component
import svgIcon from '../../../icons/blur-linear.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconBlurLinear extends LitElement {
    // To match Stencil's `shadow: false`, we render in the light DOM.
    // If you prefer to use Shadow DOM, remove this method.
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Construct the style string directly for the inline style attribute
        const inlineStyle = `height: ${this.iconSize}; width: ${this.iconSize};`;

        return html`
            <div style="${inlineStyle}">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}

// Define the custom element
customElements.define('rux-icon-blur-linear', RuxIconBlurLinear);
```