To convert your Stencil.js component to LitElement, we'll make the following changes:

1.  **Imports**: Replace Stencil's `@stencil/core` imports (`Component`, `Prop`, `h`) with Lit's `@lit/reactive-element` and `@lit/decorators.js` imports (`LitElement`, `html`, `css`, `customElement`, `property`). We'll also need `unsafeHTML` for injecting the SVG string.
2.  **`@Component` Decorator**: This is replaced by `@customElement('your-tag-name')`.
    *   **`shadow: false`**: Lit components use Shadow DOM by default, which is generally a good practice for web components as it provides encapsulation. Stencil's `shadow: false` means it renders to the light DOM. For simple icons, Shadow DOM is usually perfectly fine and often preferred. If for some specific reason you absolutely *must* render to the light DOM with Lit, you would override the `createRenderRoot()` method, but this is uncommon for icons and adds complexity. The solution below assumes Shadow DOM is acceptable.
3.  **`@Prop` Decorator**: This is replaced by Lit's `@property()` decorator. You'll also specify the `type` for better type reflection.
4.  **`render()` Method**: Stencil's `h` function (JSX-like) is replaced with Lit's `html` tagged template literals. Inline styles are applied directly using template literals, and `innerHTML` is handled using the `unsafeHTML` directive.
5.  **Styles**: Lit uses `static styles = css` for defining component-level styles. It's a good place to put base styles for the component and the SVG.

Here's the converted LitElement code:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';

// Ensure this path is correct relative to your new Lit component's location
import svgIcon from '../../../icons/arrow-forward-ios.svg'; 

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-arrow-forward-ios')
export class RuxIconArrowForwardIos extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // Lit components use Shadow DOM by default. This is generally preferred for encapsulation.
    // If you explicitly needed light DOM (like Stencil's shadow: false), you'd need to
    // override createRenderRoot(), which is less common for simple icon components.
    static styles = css`
        :host {
            display: inline-block; /* Allows the component to sit nicely in text flow */
            vertical-align: middle; /* Helps align with surrounding text */
            line-height: 0; /* Prevents extra space below the icon */
        }
        div {
            /* The div acts as the container that receives the computed size */
            display: flex; /* Use flexbox to center the SVG within the div */
            align-items: center;
            justify-content: center;
            box-sizing: border-box; /* Ensures padding/border are included in the size */
        }
        svg {
            /* Ensures the SVG itself fills the container div */
            width: 100%;
            height: 100%;
            /* Optional: Allows the SVG to inherit the text color of its parent */
            fill: currentColor; 
        }
    `;

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Apply height and width directly to the container div using inline styles.
        // The imported svgIcon string is injected using unsafeHTML.
        // WARNING: Using unsafeHTML can be a security risk if the content is not trusted.
        // Since this is an autogenerated internal SVG, it's typically safe.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}
```