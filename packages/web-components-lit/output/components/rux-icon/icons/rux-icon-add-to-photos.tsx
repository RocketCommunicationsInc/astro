To convert the Stencil.js component to LitElement, we'll make the following changes:

1.  **Imports**: Replace Stencil imports with LitElement imports (`LitElement`, `html`, `css`, `customElement`, `property`).
2.  **Class Definition**:
    *   Change `@Component` to `@customElement('rux-icon-add-to-photos')`.
    *   Extend `LitElement`.
3.  **Properties**:
    *   Change `@Prop()` to `@property()`. For the `size` property, specify `type: String`.
4.  **Rendering**:
    *   Replace Stencil's `h` (JSX) with Lit's `html` tagged template literal.
    *   Use Lit's `unsafeSVG` directive from `lit/directives/unsafe-svg.js` to securely inject the SVG string. This is safer and more idiomatic than directly setting `innerHTML`.
    *   Apply styles directly using a `style` attribute binding.
5.  **Shadow DOM**: The original Stencil component has `shadow: false`, meaning it renders into the light DOM. Lit components by default render into the Shadow DOM. To match the original behavior, we'll override the `createRenderRoot` method to return `this`.
6.  **Styles**: Lit components typically define their styles within a `static styles = css` block. Even though the original component primarily uses inline styles, we'll add an empty `static styles` block for completeness, or a basic one if we want to ensure any default styles are applied. In this case, an empty one is fine, as all styling is inline.

Here's the converted LitElement component:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js'; // For securely injecting SVG string
import svgIcon from '../../../icons/add-to-photos.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-add-to-photos')
export class RuxIconAddToPhotos extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    // Stencil's shadow: false means rendering to the light DOM.
    // Lit elements render to the shadow DOM by default.
    // To match the Stencil behavior, override createRenderRoot.
    protected createRenderRoot(): Element | ShadowRoot {
        return this; // Render to light DOM
    }

    // Lit elements usually define static styles here.
    // In this case, all styling is inline, so we can keep it empty or define base styles.
    static styles = css`
        /* Add any base styles for the component if needed */
        :host {
            display: inline-block; /* Or block, depending on desired default layout */
            vertical-align: middle; /* Common for icon components */
        }
        div {
            display: flex;
            align-items: center;
            justify-content: center;
        }
    `;

    get _iconSize() {
        const sizes: { [key: string]: string } = { // Explicitly type the object values as string
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Construct the style string directly for Lit's style binding
        const dynamicStyle = `height: ${this._iconSize}; width: ${this._iconSize};`;

        return html`
            <div style=${dynamicStyle}>
                ${unsafeSVG(svgIcon)}
            </div>
        `;
    }
}
```