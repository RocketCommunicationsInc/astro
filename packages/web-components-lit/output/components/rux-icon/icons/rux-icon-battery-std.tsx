Here's the Stencil.js component converted to LitElement.

Key changes:

1.  **Imports**: Switched from `@stencil/core` to `lit` and `lit/decorators.js` for `@property`. Added `unsafeHTML` for safely injecting the SVG string.
2.  **Base Class**: `RuxIconBatteryStd` now extends `LitElement`.
3.  **Shadow DOM**: Stencil's `shadow: false` is replaced by overriding `createRenderRoot()` to return `this`, making it render in the light DOM.
4.  **Properties**: Stencil's `@Prop()` is replaced by Lit's `@property()` decorator. The type definition remains the same.
5.  **Rendering**:
    *   Lit uses `html` tagged template literals for its render function.
    *   Instead of JSX's `innerHTML={svgIcon}`, Lit uses the `unsafeHTML` directive to inject raw HTML content.
    *   Inline styles are applied using the `.style` binding: `.style=${style}`.

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // For injecting raw HTML strings

import svgIcon from '../../../icons/battery-std.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconBatteryStd extends LitElement {
    // Stencil's `shadow: false` is equivalent to overriding `createRenderRoot`
    // to return `this`, making the component render in the light DOM.
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    // Stencil's `@Prop()` is equivalent to Lit's `@property()`
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize() {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        };

        // Lit uses `html` tagged template literals for rendering.
        // `unsafeHTML` is used to inject the SVG string directly.
        // `.style=${style}` applies the style object directly to the element.
        return html`<div .style=${style}>${unsafeHTML(svgIcon)}</div>`;
    }
}

// Define the custom element, which Stencil does automatically via @Component
// but Lit requires explicit definition.
customElements.define('rux-icon-battery-std', RuxIconBatteryStd);
```