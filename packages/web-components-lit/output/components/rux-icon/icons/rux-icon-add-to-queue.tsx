To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with Lit's `LitElement`, `html`, `property`, and `unsafeSVG`.
2.  **Class Definition**: Extend `LitElement` and define the custom element tag name using `static tagName`.
3.  **Properties**: Use the `@property` decorator from `lit/decorators.js`.
4.  **Render Method**: Convert JSX (`h`) to Lit's `html` template literal syntax, and use `unsafeSVG` to inject the SVG content.
5.  **Styles**: Inline styles are directly supported in Lit's `html` templates.
6.  **Registering the Element**: Call `customElements.define` to register your new Lit component.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js';

// This import assumes your build system (e.g., Vite, Webpack, Rollup) is configured
// to import .svg files as a string, similar to how Stencil's build process handles them.
import svgIcon from '../../../icons/add-to-queue.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAddToQueue extends LitElement {
    // Define the custom element tag name.
    // The `static tagName` property is the recommended way to define the tag since Lit 3.
    // For Lit 2, `static is = 'rux-icon-add-to-queue'` was also common.
    static override tagName = 'rux-icon-add-to-queue';

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        // If the size is a predefined key, return its corresponding value; otherwise, return the size as is.
        return sizes[this.size] || this.size;
    }

    override render() {
        // Create the inline style string for height and width
        const iconStyle = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Render the div with inline styles and inject the SVG using unsafeSVG.
        // unsafeSVG is used because `svgIcon` is a string of raw SVG content.
        // It's safe here because `svgIcon` is a trusted, pre-compiled asset.
        return html`
            <div style="${iconStyle}">
                ${unsafeSVG(svgIcon)}
            </div>
        `;
    }
}

// Register the custom element with the browser.
// This line is essential for your component to be recognized and used in HTML.
customElements.define(RuxIconAddToQueue.tagName, RuxIconAddToQueue);
```