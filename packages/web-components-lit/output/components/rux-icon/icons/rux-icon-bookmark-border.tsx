To convert your Stencil.js component to LitElement, we'll replace Stencil-specific decorators and syntax with Lit's static `properties` and `html` template literal syntax, and handle the light DOM rendering.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js'; // Import unsafeSVG for rendering raw SVG string
import svgIcon from '../../../icons/bookmark-border.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconBookmarkBorder extends LitElement {
    // Define properties using Lit's static properties getter
    static properties = {
        size: { type: String, reflect: true }, // reflect: true can be useful if you want the attribute to reflect the property value
    };

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // Stencil's `shadow: false` means it renders in the light DOM.
    // In Lit, the default is shadow DOM. To render in the light DOM, override `createRenderRoot`.
    createRenderRoot() {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Apply styles directly in the template literal
        // Use unsafeSVG directive to render the raw SVG string
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeSVG(svgIcon)}
            </div>
        `;
    }
}

// Register the custom element with the browser
// This is typically done once for each component.
customElements.define('rux-icon-bookmark-border', RuxIconBookmarkBorder);
```

### Key Changes and Explanations:

1.  **Imports**:
    *   `import { Component, Prop, h } from '@stencil/core'` is replaced with `import { LitElement, html } from 'lit';`.
    *   `import { unsafeSVG } from 'lit/directives/unsafe-svg.js';` is added to safely inject the raw SVG string.
2.  **Class Definition**:
    *   `export class RuxIconBookmarkBorder` becomes `export class RuxIconBookmarkBorder extends LitElement`.
3.  **Properties (`@Prop` to `static properties`)**:
    *   Stencil's `@Prop()` decorator is replaced by a `static properties` getter in Lit.
    *   `@Prop() size: ... = 'auto'` becomes a class property `size: ... = 'auto';` and an entry in `static properties`: `size: { type: String, reflect: true }`.
    *   `reflect: true` is added as a common practice if you want the property's value to also be set as an HTML attribute on the custom element itself.
4.  **Light DOM (`shadow: false` to `createRenderRoot`)**:
    *   Stencil's `@Component({ shadow: false })` indicates the component renders into the light DOM (not a Shadow DOM).
    *   In Lit, components default to using Shadow DOM. To achieve light DOM rendering, you override the `createRenderRoot()` method to return `this` (the element itself) instead of a new ShadowRoot.
5.  **Rendering (`h` to `html` and `unsafeSVG`)**:
    *   Stencil's `h` function for JSX is replaced by Lit's `html` template literal function.
    *   The `style` object is converted into inline CSS properties within the `style` attribute: `style="height: ${this.iconSize}; width: ${this.iconSize};"`.
    *   `innerHTML={svgIcon}` is replaced with `${unsafeSVG(svgIcon)}`. `unsafeSVG` is a Lit directive that allows you to render a string as raw HTML/SVG within your template, which is necessary for the `svgIcon` string to be parsed as actual SVG elements. **Be cautious with `unsafeSVG`**: only use it with trusted input, as it can open up cross-site scripting (XSS) vulnerabilities if used with untrusted user-provided content. In this case, since `svgIcon` is a static import, it's safe.
6.  **Custom Element Registration**:
    *   While Stencil handles this behind the scenes with `@Component({ tag: ... })`, with Lit, you explicitly register the component using `customElements.define('your-tag-name', YourClass);` usually at the bottom of the component file or in an entry point.