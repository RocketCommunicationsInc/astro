To convert your Stencil.js component to LitElement, we need to adapt the class structure, property declarations, rendering logic, and import statements.

LitElement typically uses a Shadow DOM by default, which is generally good practice for encapsulating components, including icons. Your Stencil component explicitly set `shadow: false`, meaning it rendered into the light DOM. I've converted it to use Lit's default Shadow DOM behavior, as it's often more robust for web components. If you *must* render to the light DOM, I've included a commented-out section for `createRenderRoot`.

Here's the converted LitElement code:

```typescript
// From Stencil.js:
// import { Component, Prop, h } from '@stencil/core'

// To LitElement:
import { LitElement, html, css } from 'lit';
import { property, customElement } from 'lit/decorators.js'; // For @property and @customElement decorators
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // For rendering raw SVG string

import svgIcon from '../../../icons/border-all.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

// Stencil: @Component({ tag: 'rux-icon-border-all', shadow: false })
// LitElement: @customElement decorator to define the custom element tag
@customElement('rux-icon-border-all')
export class RuxIconBorderAll extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    // Stencil: @Prop() size: ... = 'auto'
    // LitElement: @property decorator makes the 'size' property reactive.
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'; // Default value set directly on the property

    // LitElement components by default render into a Shadow DOM.
    // If you explicitly need to render into the light DOM (similar to Stencil's shadow: false),
    // uncomment the following method. However, for icons, Shadow DOM is often preferred for encapsulation.
    /*
    protected createRenderRoot(): Element | DocumentFragment {
        return this; // Render into the component itself, not a shadow root
    }
    */

    // LitElement uses `static styles` to define component-specific CSS,
    // which is scoped to the component's Shadow DOM.
    static styles = css`
        :host {
            display: inline-block; /* Common for icons to behave like text elements */
            line-height: 1; /* Prevents extra space below inline elements */
        }
        div {
            /* This div acts as the container for the SVG */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        div > svg {
            /* Ensure the SVG fills its container */
            display: block;
            width: 100%;
            height: 100%;
        }
    `;

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // In Lit, we use template literals with `html` for rendering.
        // Dynamic styles are applied using attribute binding `style="${variable}"`.
        // To inject raw HTML/SVG strings, use the `unsafeHTML` directive to bypass Lit's default sanitization.
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`;

        return html`<div style="${style}">${unsafeHTML(svgIcon)}</div>`;
    }
}
```