To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports with Lit's `LitElement`, `html`, `customElement`, and `property`.
2.  **Class Definition**: Extend `LitElement` and use the `@customElement` decorator.
3.  **Properties**: Replace `@Prop()` decorators with Lit's `@property()` decorator.
4.  **Shadow DOM**: Stencil's `shadow: false` means the component renders to the light DOM. In Lit, the default is shadow DOM. To render to the light DOM, you'll need to override the `createRenderRoot` method.
5.  **Render Method**: Replace Stencil's `h` function with Lit's `html` tagged template literal for rendering. Use Lit's property binding (`.innerHTML`) for injecting raw SVG content.

Here's the converted code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import svgIcon from '../../../icons/3d-rotation.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-3d-rotation')
export class RuxIcon3dRotation extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Stencil's `shadow: false` means the component renders to the light DOM.
     * To achieve the same behavior in LitElement, override `createRenderRoot`
     * to return `this` (the component itself) instead of a new ShadowRoot.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const height = this.iconSize;
        const width = this.iconSize;

        // In Lit, we use `html` tagged template literals for rendering.
        // Use property binding (`.innerHTML`) to insert the raw SVG string.
        return html`<div style="height: ${height}; width: ${width};" .innerHTML=${svgIcon}></div>`;
    }
}
```