To convert your Stencil.js component to LitElement, we'll need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with Lit's (`LitElement`, `html`, `customElement`, `property`). We'll also need `unsafeHTML` for injecting the SVG content.
2.  **Class Extension**: The class will extend `LitElement`.
3.  **Decorators**:
    *   `@Component({ tag: 'rux-icon-blur-on', shadow: false })` becomes `@customElement('rux-icon-blur-on')` and an override of `createRenderRoot()` for `shadow: false`.
    *   `@Prop()` becomes `@property()`.
4.  **`shadow: false` Handling**: In Stencil, `shadow: false` means the component's content renders directly into the light DOM of the custom element. In Lit, custom elements by default render into a shadow root. To achieve the light DOM rendering, you must override the `createRenderRoot()` method to return `this`.
5.  **`render()` Method**: Stencil's `render()` often uses JSX or `h()` calls. Lit's `render()` returns an `html` tagged template literal. We'll use inline styles and the `unsafeHTML` directive to inject the SVG string.

Here's the converted LitElement code:

```typescript
import { LitElement, html, customElement, property } from 'lit';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // Required for injecting raw HTML (SVG string)

import svgIcon from '../../../icons/blur-on.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-blur-on')
export class RuxIconBlurOn extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Stencil's `shadow: false` means the component renders into the light DOM.
     * In Lit, this is achieved by overriding `createRenderRoot` to return `this`.
     */
    protected createRenderRoot(): Element | DocumentFragment {
        return this;
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Lit's render method returns an HTML template literal.
        // Styles are applied inline, and the SVG string is injected using unsafeHTML.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}
```

**Key Changes Explained:**

*   **`import { LitElement, html, customElement, property } from 'lit';`**: These are the core Lit imports.
*   **`import { unsafeHTML } from 'lit/directives/unsafe-html.js';`**: This directive is necessary when you want to render a raw HTML string (like your `svgIcon` content) into the DOM. Lit's `html` template literal escapes content by default for security.
*   **`@customElement('rux-icon-blur-on')`**: This decorator registers your class as a custom element with the given tag name, replacing Stencil's `@Component({ tag: ... })`.
*   **`export class RuxIconBlurOn extends LitElement {`**: Your component now extends `LitElement`.
*   **`@property({ type: String })`**: Replaces `@Prop()`. `type: String` is added for explicit type handling by Lit's reactive properties system (though for basic string properties, it's often inferred).
*   **`protected createRenderRoot(): Element | DocumentFragment { return this; }`**: This is the crucial part for replicating Stencil's `shadow: false`. By returning `this`, Lit's rendering engine will place the component's content directly inside the `<rux-icon-blur-on>` element, rather than creating a Shadow DOM for it.
*   **`render() { ... return html`...`; }`**: The `render` method now returns an `html` tagged template literal.
*   **`style="height: ${this.iconSize}; width: ${this.iconSize};"`**: Inline styles are used directly within the template.
*   **`${unsafeHTML(svgIcon)}`**: The `unsafeHTML` directive is used to inject the SVG string directly into the `div`, ensuring it's parsed as HTML.