To convert the Stencil.js component to LitElement, we need to adjust the imports, component decorators, property declarations, and the `render` method to use Lit's syntax and conventions.

Here's the converted LitElement component:

```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import svgIcon from '../../../icons/border-bottom.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconBorderBottom extends LitElement {
    // Define the custom element's tag name
    static tagName = 'rux-icon-border-bottom';

    // Define the component's styles using Lit's css tagged template literal.
    // By default, Lit components use Shadow DOM, which encapsulates these styles.
    static styles = css`
        :host {
            display: inline-block; /* Ensures the host element wraps the content and behaves like an inline block */
            vertical-align: middle; /* Aligns the icon nicely with text */
            line-height: 1; /* Prevents extra space below the icon when used inline */
        }
        div {
            display: flex; /* Use flexbox to center the SVG within its container */
            align-items: center;
            justify-content: center;
            /* The div's height and width will be set dynamically via inline style */
        }
        div svg {
            display: block; /* Removes extra space typically found below inline SVGs */
            width: 100%; /* Make the SVG fill the div's width */
            height: 100%; /* Make the SVG fill the div's height */
        }
    `;

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Construct the inline style string for the div wrapper
        const divStyle = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Use Lit's html tagged template literal for rendering.
        // The .innerHTML property binding is used to inject the SVG string.
        return html`<div style="${divStyle}" .innerHTML="${svgIcon}"></div>`;
    }
}

// Register the custom element with the browser.
// The check prevents errors if the script is loaded multiple times (e.g., during hot module replacement).
if (!customElements.get(RuxIconBorderBottom.tagName)) {
    customElements.define(RuxIconBorderBottom.tagName, RuxIconBorderBottom);
}
```