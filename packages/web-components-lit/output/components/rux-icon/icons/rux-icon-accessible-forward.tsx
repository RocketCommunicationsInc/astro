To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil's imports with Lit's.
2.  **Decorators**: Convert `@Component` to `@customElement` and `@Prop` to `@property`.
3.  **Base Class**: Extend `LitElement`.
4.  **Rendering**: Replace Stencil's `h` (JSX) with Lit's `html` template literal and `unsafeHTML` directive for injecting the SVG string.
5.  **Shadow DOM**: Replicate `shadow: false` behavior by overriding `createRenderRoot` if desired.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // For injecting the SVG string safely
import svgIcon from '../../../icons/accessible-forward.svg'; // Assuming this imports the SVG as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-accessible-forward')
export class RuxIconAccessibleForward extends LitElement {
    /**
     * Replicates Stencil's `shadow: false` behavior by rendering directly into the light DOM.
     * If you prefer using Lit's default Shadow DOM for encapsulation, remove this method.
     */
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Using inline styles as per the original Stencil component.
        // `unsafeHTML` is used to inject the SVG string, similar to Stencil's `innerHTML`.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}
```

### Key Changes Explained:

1.  **`import { LitElement, html } from 'lit';`**: Imports the base class `LitElement` and the `html` tag function for creating templates.
2.  **`import { customElement, property } from 'lit/decorators.js';`**: Imports the decorators for defining a custom element and its properties.
3.  **`import { unsafeHTML } from 'lit/directives/unsafe-html.js';`**: Imports a Lit directive that allows injecting raw HTML strings into the template. This is the equivalent of `innerHTML`. Use with caution as it can open up XSS vulnerabilities if the string comes from an untrusted source.
4.  **`export class RuxIconAccessibleForward extends LitElement {`**: The component class now extends `LitElement`.
5.  **`@customElement('rux-icon-accessible-forward')`**: This decorator replaces Stencil's `@Component({ tag: '...' })` and registers the web component with the browser.
6.  **`createRenderRoot() { return this; }`**: This method overrides Lit's default behavior of creating a Shadow DOM. By returning `this`, the component's content will be rendered directly into the light DOM, which matches Stencil's `shadow: false` setting. If you want the benefits of Shadow DOM (encapsulation), you can remove this method.
7.  **`@property({ type: String }) size: ...`**: This decorator replaces Stencil's `@Prop()`.
    *   `type: String` tells Lit how to interpret the attribute value when it's set from HTML.
8.  **`render() { return html`...`; }`**:
    *   Lit's `render()` method returns a `TemplateResult` created by the `html` tag function.
    *   `style="height: ${this.iconSize}; width: ${this.iconSize};"`: Template literals are used to embed the dynamic `iconSize` values directly into the style attribute.
    *   `${unsafeHTML(svgIcon)}`: This injects the content of the `svgIcon` variable (which is assumed to be the SVG markup as a string) directly into the `div`.