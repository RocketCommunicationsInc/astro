To convert the Stencil.js component to LitElement, we'll replace Stencil-specific decorators and functions with their Lit counterparts, and adapt the rendering logic.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import svgIcon from '../../../icons/border-right.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

// @internal - Stencil's @internal decorator doesn't have a direct Lit equivalent, but the comment can remain.
@customElement('rux-icon-border-right')
export class RuxIconBorderRight extends LitElement {
    // Stencil's `@Component({ shadow: false })` indicates that the component should render
    // its content directly into the light DOM of the host element, not within a Shadow DOM.
    // To achieve this same behavior in LitElement, we override the `createRenderRoot` method.
    protected createRenderRoot(): Element | ShadowRoot {
        return this; // Renders directly into the host element
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // No `static styles` block is needed here as the original Stencil component
    // only used inline styles for sizing, and `shadow: false` typically means
    // component-scoped styles are not encapsulated anyway.

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Construct the inline style string
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Use Lit's `html` tagged template literal for rendering.
        // The `innerHTML` binding in Lit requires a leading dot: `.innerHTML`.
        return html`<div style="${style}" .innerHTML="${svgIcon}"></div>`;
    }
}
```

### Key Changes:

1.  **Imports**:
    *   `Component`, `Prop`, `h` from `@stencil/core` are replaced with `LitElement`, `html` from `lit`, and `customElement`, `property` from `lit/decorators.js`.
    *   `h` (Stencil's hyperscript function) is no longer needed as Lit uses `html` tagged template literals.

2.  **Class Definition**:
    *   The `@Component` decorator is replaced by extending `LitElement` and using the `@customElement` decorator to define the tag name (`rux-icon-border-right`).

3.  **Shadow DOM (Important for `shadow: false`)**:
    *   Stencil's `shadow: false` means the component renders into the light DOM. Lit components, by default, render into a Shadow DOM. To replicate Stencil's `shadow: false` behavior, we override Lit's `createRenderRoot()` method to return `this` (the host element itself) instead of a new `ShadowRoot`.

4.  **Properties**:
    *   The `@Prop()` decorator is replaced by Lit's `@property()` decorator. The type is automatically inferred, but you can explicitly set `type: String` as shown.

5.  **Styling**:
    *   The original component used inline styles (`style={style}`). This is translated directly by constructing the style string and binding it to the `style` attribute.
    *   Since `shadow: false` is maintained, there's no `static styles` block (which would typically define component-scoped CSS for Shadow DOM).

6.  **Rendering (`render()` method)**:
    *   Stencil's JSX-like syntax (`<div style={style} innerHTML={svgIcon}></div>`) is converted to Lit's `html` tagged template literal.
    *   The `innerHTML` binding is done using `.innerHTML="${svgIcon}"` (note the leading dot for property binding).