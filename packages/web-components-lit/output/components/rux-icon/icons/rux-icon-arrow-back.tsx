To convert the Stencil.js component to LitElement, we need to map Stencil's decorators and render function to Lit's equivalents.

Here's the converted LitElement component:

```typescript
import { LitElement, html, property } from 'lit';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import { styleMap } from 'lit/directives/style-map.js'; // Import styleMap for dynamic styles
import svgIcon from '../../../icons/arrow-back.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconArrowBack extends LitElement {
    // Stencil's `shadow: false` means it renders into the light DOM.
    // In Lit, this is achieved by overriding `createRenderRoot`.
    override createRenderRoot() {
        return this; // This makes the component render directly into its host element (light DOM)
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) // @Prop() becomes @property() with a type configuration
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize(): string { // Added return type for clarity
        const sizes: { [key: string]: string } = { // Changed 'any' to 'string' for better type safety
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        };

        // Lit uses `html` tagged template literals for rendering.
        // `style={style}` in Stencil JSX becomes `style=${styleMap(style)}` in Lit for object-based styles.
        // `innerHTML={svgIcon}` becomes `${unsafeHTML(svgIcon)}` in Lit.
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`;
    }
}

// Define the custom element. This replaces Stencil's `tag` property in `@Component`.
customElements.define('rux-icon-arrow-back', RuxIconArrowBack);
```

### Key Changes Explained:

1.  **Imports:**
    *   `LitElement`, `html`, `property` are imported from `lit`.
    *   `unsafeHTML` and `styleMap` are imported from `lit/directives/unsafe-html.js` and `lit/directives/style-map.js` respectively. These are Lit's ways to handle dynamic HTML injection and object-based inline styles securely and efficiently.

2.  **Class Definition:**
    *   The component class now `extends LitElement`.

3.  **No Shadow DOM (`shadow: false`):**
    *   In Stencil, `shadow: false` meant the component rendered directly into the Light DOM.
    *   In Lit, components render into the Shadow DOM by default. To disable this and render into the Light DOM, you override the `createRenderRoot()` method to return `this` (the component itself) instead of a new ShadowRoot.

4.  **Properties (`@Prop` to `@property`):**
    *   Stencil's `@Prop()` decorator is replaced by Lit's `@property()` decorator.
    *   You often specify the `type` option in `@property` (e.g., `{ type: String }`) to help Lit with attribute serialization/deserialization.

5.  **Rendering (`render()`):**
    *   Stencil uses `h` (or JSX compiled to `h`) to create VDOM nodes. Lit uses `html` tagged template literals.
    *   **Inline Styles:** Stencil's `style={style}` directly accepts a style object. In Lit, for object-based styles, you use the `styleMap` directive: `style=${styleMap(style)}`. This efficiently updates only the changed style properties.
    *   **Injecting HTML/SVG:** Stencil's `innerHTML={svgIcon}` is replaced by Lit's `unsafeHTML` directive: `${unsafeHTML(svgIcon)}`. This is used when you need to inject raw HTML strings. It's prefixed with `unsafe` as a reminder that you should only use it with trusted input to prevent XSS vulnerabilities. Since `svgIcon` is an imported static asset, it's generally safe here.

6.  **Custom Element Definition:**
    *   Stencil defines the custom element tag using the `tag` property in the `@Component` decorator.
    *   In Lit, you explicitly define the custom element using `customElements.define('your-tag-name', YourComponentClass)` after the class definition.