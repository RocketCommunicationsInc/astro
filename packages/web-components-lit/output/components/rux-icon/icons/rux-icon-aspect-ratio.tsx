```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeSVG } from 'lit/directives/unsafe-svg.js';
import { styleMap } from 'lit/directives/style-map.js';

// Assuming svgIcon imports the SVG content as a string.
// If your build setup outputs a DOM element or a different format,
// you might need to adjust how svgIcon is used.
import svgIcon from '../../../icons/aspect-ratio.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
export class RuxIconAspectRatio extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // LitElement components, by default, use Shadow DOM.
    // If you explicitly need this component to render into the light DOM
    // (similar to Stencil's `shadow: false`), uncomment the following method:
    // createRenderRoot() {
    //     return this;
    // }

    // No need for static styles here as inline styles are used for the SVG container.
    // static styles = css`
    //   /* Add any global styles for the component if needed */
    // `;

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
            // You might want to add display: 'block' or similar to the div
            // to better control its layout, depending on usage.
            // For example: display: 'inline-flex', alignItems: 'center', justifyContent: 'center'
            // if you want the SVG centered within the specified size.
            // Otherwise, the SVG itself might need to handle its own sizing relative to the div.
        };

        // We use unsafeSVG because we're inserting raw SVG string content.
        // We use styleMap to apply an object of styles to the element.
        return html`<div style=${styleMap(style)}>${unsafeSVG(svgIcon)}</div>`;
    }
}

// Register the custom element with the tag name.
// For consistency with Stencil's @Component({ tag: '...' }), we can define it here.
if (!customElements.get('rux-icon-aspect-ratio')) {
    customElements.define('rux-icon-aspect-ratio', RuxIconAspectRatio);
}
```