Okay, let's convert this Stencil.js component to LitElement.

Here's a breakdown of the changes and why they are made:

1.  **Imports**:
    *   `@stencil/core` is replaced with `lit` and `lit/decorators.js` for core functionality and decorators.
    *   `lit/directives/style-map.js` is imported for dynamically applying CSS styles from an object (similar to how Stencil's `style={style}` works with objects).

2.  **Component Decorator (`@Component`)**:
    *   Replaced with `@customElement('tag-name')`.

3.  **Shadow DOM (`shadow: false`)**:
    *   Stencil defaults to shadow DOM, and `shadow: false` means it renders into the light DOM.
    *   Lit also defaults to shadow DOM. To render into the light DOM (mimicking `shadow: false`), we override the `createRenderRoot()` method to return `this` (the element itself) instead of a shadow root.

4.  **Prop Decorator (`@Prop`)**:
    *   Replaced with `@property()`.
    *   It's good practice to specify `type: String` for string properties to ensure Lit's attribute reflection and conversion work correctly.

5.  **`h` function / JSX**:
    *   Stencil uses JSX (transformed by `h`). Lit uses tagged template literals with `html` from `lit-html`.
    *   `style={style}` becomes `style=${styleMap(style)}`.
    *   `innerHTML={svgIcon}` becomes `?innerHTML=${svgIcon}` (Lit's special syntax for `innerHTML` binding).

Here's the converted code:

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { styleMap } from 'lit/directives/style-map.js' // For dynamic style binding
import svgIcon from '../../../icons/add-circle-outline.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-add-circle-outline')
export class RuxIconAddCircleOutline extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto'

    /**
     * By default, Lit components render to the shadow DOM.
     * To match Stencil's `shadow: false`, we override `createRenderRoot`
     * to render directly into the element (light DOM).
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        // Using lit-html's tagged template literal for rendering.
        // `style=${styleMap(style)}` applies the style object dynamically.
        // `?innerHTML=${svgIcon}` safely injects the SVG string as inner HTML.
        return html`<div style=${styleMap(style)} ?innerHTML=${svgIcon}></div>`
    }
}
```