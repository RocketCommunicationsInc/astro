To convert the Stencil.js component to LitElement, we need to:

1.  Replace Stencil's decorators and rendering logic with Lit's.
2.  Use Lit's `html` tagged template literal for rendering.
3.  Manage properties with `@property` decorator.
4.  Handle `shadow: false` by overriding `createRenderRoot` to render into the light DOM.
5.  Ensure the component is defined using `customElements.define`.

Here's the converted code:

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js'; // Lit 2+ decorators are in 'lit/decorators.js'
import svgIcon from '../../../icons/alarm-on.svg'; // Assuming this import correctly provides the SVG content as a string

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAlarmOn extends LitElement {
    // Define the custom element tag name
    static is = 'rux-icon-alarm-on';

    // Stencil's `shadow: false` means the component renders directly into the light DOM.
    // In Lit, we override `createRenderRoot` to achieve this.
    // By default, Lit components render into a shadow DOM.
    createRenderRoot() {
        return this; // Render into the light DOM (this element itself)
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize() {
        const sizes: { [key: string]: string } = { // Changed `any` to `string` for better type safety
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Lit uses `html` tagged template literals for rendering.
        // Inline styles are set directly using template literal interpolation.
        // `innerHTML` is set using a property binding (prefixed with a dot: `.innerHTML`).
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};" .innerHTML="${svgIcon}"></div>
        `;
    }
}

// Define the custom element if it hasn't been defined already
if (!customElements.get(RuxIconAlarmOn.is)) {
    customElements.define(RuxIconAlarmOn.is, RuxIconAlarmOn);
}
```