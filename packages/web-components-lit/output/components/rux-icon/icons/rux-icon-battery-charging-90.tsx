To convert the Stencil.js component to LitElement, we'll make the following changes:

1.  **Imports**: Replace Stencil-specific imports with Lit's `LitElement`, `html`, `css`, and decorators.
2.  **Class Definition**:
    *   Remove the Stencil `@Component` decorator.
    *   Extend `LitElement`.
    *   Use Lit's `@customElement` decorator to define the web component.
3.  **Properties (`@Prop`)**: Replace Stencil's `@Prop` decorator with Lit's `@property` decorator.
4.  **`render` Method**: Replace Stencil's `h` (JSX) with Lit's `html` template literal syntax. Handle dynamic styles and `innerHTML` binding correctly for Lit.
5.  **Shadow DOM**: Stencil's `shadow: false` renders to the light DOM. Lit's default is shadow DOM. For icon components, shadow DOM is generally preferred for encapsulation. If light DOM rendering is strictly required, you'd add a `createRenderRoot()` method to return `this`. For this conversion, we'll stick to Lit's default shadow DOM, as it's the idiomatic and generally more robust approach for web components unless there's a specific reason not to.
6.  **Base Styles**: Add a `static styles` block for any base component styling (e.g., `display: inline-block` for icons).

Here's the converted LitElement component:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import svgIcon from '../../../icons/battery-charging-90.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

@customElement('rux-icon-battery-charging-90')
export class RuxIconBatteryCharging90 extends LitElement {
    // Optional: Define base styles for the component.
    // For icons, it's common to set display: inline-block.
    static styles = css`
        :host {
            display: inline-block;
            /* Add any other base styles for the host element here */
        }
        /* Styles for the inner div containing the SVG, if needed */
        div {
            display: flex; /* Ensures SVG is centered if it doesn't fill the div */
            align-items: center;
            justify-content: center;
        }
        svg {
            display: block; /* Remove extra space below SVG */
            width: 100%;
            height: 100%;
        }
    `;

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Computes the final icon size based on predefined values or the custom input.
     */
    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    /**
     * LitElement's render method to create the component's DOM.
     */
    render() {
        // Create the inline style string for height and width
        const inlineStyle = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Render a div with the dynamic style and inject the SVG content
        return html`<div style="${inlineStyle}" .innerHTML="${svgIcon}"></div>`;
    }
}
```