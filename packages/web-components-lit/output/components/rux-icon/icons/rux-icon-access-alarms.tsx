To convert the Stencil.js component to LitElement, we need to change the imports, decorators, and the rendering logic.

Here's the LitElement equivalent:

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // Needed for injecting raw SVG string
import svgIcon from '../../../icons/access-alarms.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-access-alarms')
export class RuxIconAccessAlarms extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // Stencil's `shadow: false` means it renders to the light DOM.
    // LitElement defaults to Shadow DOM. To disable it, we override `createRenderRoot`.
    protected createRenderRoot(): Element | ShadowRoot {
        return this; // Render to light DOM
    }

    /**
     * Returns the computed icon size based on the `size` property.
     */
    private get _iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        // If the size is one of the predefined values, return its corresponding rem value.
        // Otherwise, return the size as is (allowing for custom values like '30px', '1em', etc.).
        return sizes[this.size] || this.size;
    }

    render() {
        // Apply height and width inline using Lit's style binding.
        // unsafeHTML is used to render the raw SVG string.
        return html`
            <div style="height: ${this._iconSize}; width: ${this._iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }

    // LitElement components can define static styles using `static styles`.
    // In this specific case, as styles are applied inline and there are no
    // element-specific styles that need to be encapsulated, `static styles`
    // is not strictly necessary but can be added if global styles for the
    // component's light DOM elements are desired.
    // static styles = css`
    //     /* Add any global styles for the light DOM content here */
    // `;
}
```

### Key Changes:

1.  **Imports**:
    *   `@stencil/core` is replaced with `lit`, `lit/decorators.js`, and `lit/directives/unsafe-html.js`.
    *   `Component`, `Prop`, `h` are no longer needed.
    *   `LitElement`, `html`, `css` (though `css` is not used in this specific example's `static styles`), `customElement`, `property`, and `unsafeHTML` are imported.

2.  **Component Definition**:
    *   The `@Component` decorator is replaced by `@customElement('rux-icon-access-alarms')` above the class definition.
    *   The class `RuxIconAccessAlarms` now `extends LitElement`.

3.  **Properties**:
    *   The `@Prop()` decorator is replaced by `@property({ type: String })`. The `type` option tells Lit how to parse the attribute value.

4.  **Shadow DOM**:
    *   Stencil's `shadow: false` means the component renders into the Light DOM. LitElement components default to using Shadow DOM. To match the original behavior, we override the `createRenderRoot()` method to return `this`, ensuring the content renders directly into the component's element itself (Light DOM).

5.  **`iconSize` Getter**:
    *   Renamed to `_iconSize` (a common convention for private/internal properties in Lit). Its logic remains the same.

6.  **`render()` Method**:
    *   Stencil's `h()` function (or JSX) is replaced by Lit's `html` template literal.
    *   Inline styles are applied directly within the `html` template using template literal expressions: `style="height: ${this._iconSize}; width: ${this._iconSize};"`.
    *   `innerHTML={svgIcon}` is replaced by `${unsafeHTML(svgIcon)}`. `unsafeHTML` is a Lit directive specifically designed for injecting raw HTML strings, which is necessary for the SVG content. It's called "unsafe" because it can introduce XSS vulnerabilities if the input isn't trusted, but in this case, `svgIcon` is a static import, so it's safe.