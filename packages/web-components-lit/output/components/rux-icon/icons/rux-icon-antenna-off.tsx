```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import svgIcon from '../../../icons/antenna-off.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
@customElement('rux-icon-antenna-off')
export class RuxIconAntennaOff extends LitElement {
    // In Stencil, `shadow: false` means the component renders directly into
    // the light DOM of the host element. In Lit, components default to
    // using a shadow DOM. To mimic Stencil's `shadow: false`, we override
    // `createRenderRoot` to return the element itself, preventing a shadow root.
    createRenderRoot() {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        // If a predefined size exists, use it; otherwise, use the provided custom value.
        return sizes[this.size] || this.size
    }

    render() {
        // Lit uses tagged template literals for rendering.
        // For setting HTML content, use the `.innerHTML` property binding.
        // For inline styles, embed them directly within the `style` attribute.
        return html`
            <div
                style="height: ${this.iconSize}; width: ${this.iconSize};"
                .innerHTML="${svgIcon}"
            ></div>
        `
    }
}
```