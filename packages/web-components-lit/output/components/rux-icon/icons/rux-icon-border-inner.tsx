To convert the Stencil.js component to LitElement, we need to:

1.  Replace Stencil's decorators (`@Component`, `@Prop`) with Lit's equivalents (`extends LitElement`, `@property`).
2.  Translate Stencil's `render()` method using Lit's `html` template literal.
3.  Address the `shadow: false` property: Lit components use Shadow DOM by default. To replicate `shadow: false` (rendering into the light DOM), we override the `createRenderRoot` method.
4.  Remove `static styles` from Lit as they are primarily for Shadow DOM encapsulation, and the original Stencil component relies on inline styles when `shadow: false`.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import svgIcon from '../../../icons/border-inner.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconBorderInner extends LitElement {
    // Stencil's `shadow: false` means the component renders directly into the light DOM
    // (as a child of the custom element tag). To replicate this behavior in LitElement,
    // we override the `createRenderRoot` method to return the element itself.
    // Be mindful that this approach reduces encapsulation, as the component's internal
    // structure and styles become directly accessible from external CSS and JavaScript.
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // Since `createRenderRoot` returns `this`, Lit's `static styles` mechanism
    // (which is designed for Shadow DOM) will not automatically apply styles.
    // The original Stencil component also relied only on inline styles for sizing,
    // so no `static styles` block is needed here.

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // The `div` element will be rendered directly as a child of `<rux-icon-border-inner>`.
        // Its `height` and `width` are set via inline styles, mirroring the Stencil approach.
        // The `.innerHTML` property is used to inject the SVG content string.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};" .innerHTML=${svgIcon}></div>
        `;
    }
}

// Register the custom element with the browser.
// This is equivalent to Stencil's `tag` property in the `@Component` decorator.
customElements.define('rux-icon-border-inner', RuxIconBorderInner);
```