To convert your Stencil.js component to LitElement, you'll need to change the imports, decorators, and the rendering logic to use Lit's `html` template literals and directives.

Here's the converted LitElement component:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';
import { styleMap } from 'lit/directives/style-map.js';

import svgIcon from '../../../icons/arrow-left.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-arrow-left')
export class RuxIconArrowLeft extends LitElement {
    /**
     * Stencil's `shadow: false` means the component renders to the light DOM.
     * Lit elements default to using Shadow DOM. To achieve the same behavior as Stencil's `shadow: false`,
     * we override the `createRenderRoot` method to return `this`, rendering directly into the element itself.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    /**
     * Calculates the effective size of the icon based on the 'size' property.
     */
    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        // If a predefined size is found, return its value. Otherwise, return the custom size string.
        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    /**
     * LitElement's render method returns an HTML template.
     * We use `styleMap` to apply dynamic CSS properties from an object,
     * and `unsafeHTML` to inject the SVG string directly into the div.
     */
    render() {
        const dynamicStyle = {
            height: this.iconSize,
            width: this.iconSize,
        };

        return html`<div style="${styleMap(dynamicStyle)}">${unsafeHTML(svgIcon)}</div>`;
    }
}
```

### Key Changes:

1.  **Imports**:
    *   Replaced `@stencil/core` imports with `lit` and `lit/decorators.js` for base classes and decorators.
    *   Added `lit/directives/unsafe-html.js` for injecting raw HTML (your SVG string).
    *   Added `lit/directives/style-map.js` for applying dynamic inline styles from an object.
2.  **Base Class**: `export class RuxIconArrowLeft` now `extends LitElement`.
3.  **Component Decorator**: `@Component` is replaced by `@customElement('rux-icon-arrow-left')`.
4.  **Shadow DOM**: Stencil's `shadow: false` means no Shadow DOM. Lit components default to Shadow DOM. To disable it, we override the `createRenderRoot()` method to return `this`. This makes the component render directly into the light DOM.
5.  **Property Decorator**: `@Prop()` is replaced by `@property({ type: String })`. The `type: String` is explicit typing for Lit's reactivity system.
6.  **`render` Method**:
    *   Stencil's `h()` function call is replaced with Lit's `html` template literal.
    *   The `style` object is passed to the `styleMap()` directive, which correctly applies multiple dynamic inline styles.
    *   `innerHTML={svgIcon}` is replaced by `${unsafeHTML(svgIcon)}`. `unsafeHTML` is crucial for injecting raw HTML/SVG strings, as Lit by default escapes all interpolated values to prevent XSS attacks. Ensure `svgIcon` is indeed a trusted string source.