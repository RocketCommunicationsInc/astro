Okay, let's convert this Stencil.js component to LitElement.

The key changes involve:
1.  **Imports**: Switching from `@stencil/core` to `lit` and `lit/decorators.js`.
2.  **Class Extension**: Extending `LitElement`.
3.  **Decorators**: Replacing `@Component` with `@customElement` and `@Prop` with `@property`.
4.  **Shadow DOM**: Handling `shadow: false` by overriding `createRenderRoot` in Lit.
5.  **Rendering**: Using Lit's `html` tagged template literal instead of Stencil's JSX/`h` function.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import svgIcon from '../../../icons/battery-charging-20.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-battery-charging-20') // Replaces @Component({ tag: ... })
export class RuxIconBatteryCharging20 extends LitElement {
    /**
     * Stencil's `shadow: false` means the component renders to the light DOM.
     * In Lit, we override `createRenderRoot` to return `this` to achieve this.
     * By default, Lit components render into a shadow root.
     */
    protected createRenderRoot(): Element | DocumentFragment {
        return this // Render to the light DOM
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) // Replaces @Prop(). `type: String` is good practice for Lit properties.
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        // Lit uses tagged template literals for rendering.
        // Styles are applied directly within the template.
        // Note the `.innerHTML` syntax for setting the inner HTML property.
        return html`<div
            style="height: ${this.iconSize}; width: ${this.iconSize};"
            .innerHTML=${svgIcon}
        ></div>`
    }
}
```