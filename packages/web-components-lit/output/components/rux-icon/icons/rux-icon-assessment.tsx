Okay, let's convert this Stencil.js component to LitElement.

Key changes:
1.  **Imports**: Replace Stencil imports with LitElement core and decorator imports.
2.  **Decorators**:
    *   `@Component({ tag: ..., shadow: false })` becomes `@customElement('...')` and we'll handle `shadow: false` if absolutely necessary (Lit defaults to shadow DOM, which is usually preferred for components). For this specific case, since styles are inline, the shadow DOM default of Lit won't interfere with the *appearance*, but it will affect CSS encapsulation. If strict light DOM is required, you'd override `createRenderRoot`. For now, we'll use Lit's default shadow DOM as it's best practice.
    *   `@Prop()` becomes `@property()`.
3.  **Rendering**:
    *   `h` (implicit JSX) is replaced by Lit's `html` template literal tag.
    *   `innerHTML={svgIcon}` becomes `${unsafeHTML(svgIcon)}` (requires `unsafeHTML` directive).
    *   `style={style}` becomes `style=${styleMap(style)}` (requires `styleMap` directive for object-based styles).

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js'
import { styleMap } from 'lit/directives/style-map.js'

// Assuming this path is correct relative to the new Lit component file
import svgIcon from '../../../icons/assessment.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-assessment')
export class RuxIconAssessment extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    // LitElement uses Shadow DOM by default.
    // The original Stencil component had `shadow: false`.
    // If you absolutely need to render into the light DOM (no Shadow DOM encapsulation),
    // uncomment the method below. However, for a reusable icon, Shadow DOM is generally preferred.
    // protected createRenderRoot(): Element | ShadowRoot {
    //     return this; // Render into the light DOM
    // }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        // Use lit-html's html tag for templates
        // Use styleMap directive for dynamic style objects
        // Use unsafeHTML directive to inject the SVG string
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`
    }
}
```