To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports:** Replace Stencil imports with Lit's `LitElement`, `html`, `css`, `property` decorator, and `unsafeHTML` directive.
2.  **Class Definition:** Extend `LitElement`.
3.  **Properties:** Convert `@Prop()` decorators to `@property()` decorators.
4.  **Styling:** Use Lit's `static styles = css` for component-level CSS. Inline styles within `render()` are also still valid for dynamic styles.
5.  **Rendering:** Replace Stencil's `h` (or JSX directly) with Lit's `html` tagged template literal. For embedding raw HTML strings like SVGs, use the `unsafeHTML` directive.
6.  **Component Registration:** Manually call `customElements.define` to register the web component.
7.  **Shadow DOM:** LitElement defaults to using a Shadow DOM. Stencil's `shadow: false` means it renders to the light DOM. For most icon components, Shadow DOM is acceptable and provides encapsulation. If you *strictly* need light DOM rendering in Lit, you would override the `createRenderRoot()` method (see commented out section in the example below), but for an SVG icon, it's rarely necessary, and Shadow DOM is idiomatic for Lit.

Here's the converted LitElement code:

```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js'; // Import for rendering raw HTML/SVG strings

import svgIcon from '../../../icons/branding-watermark.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
// Instead of @Component, extend LitElement directly
export class RuxIconBrandingWatermark extends LitElement {
    // If you explicitly need to render to light DOM (no shadow DOM), uncomment this:
    /*
    createRenderRoot() {
        return this;
    }
    */

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    // Use @property decorator instead of @Prop
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize() {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        // More concise way to return the size
        return sizes[this.size] || this.size;
    }

    // Define component-scoped styles using static styles
    static styles = css`
        :host {
            display: inline-flex; /* Common for icons to make them fit content */
            align-items: center;
            justify-content: center;
            overflow: hidden; /* Important for SVGs to prevent overflow if they exceed boundaries */
        }
        div {
            /* This div contains the SVG and gets the dynamic height/width */
            display: flex; /* Helps center the SVG if it's smaller than the div */
            align-items: center;
            justify-content: center;
            line-height: 0; /* Prevents extra space below inline elements like SVG */
        }
        svg {
            display: block; /* Ensures SVG behaves predictably */
            width: 100%; /* Make SVG fill the container div */
            height: 100%;
        }
    `;

    render() {
        // Use Lit's html tagged template literal.
        // Apply dynamic styles directly in the template.
        // Use unsafeHTML directive to render the raw SVG string.
        return html`
            <div style="height: ${this.iconSize}; width: ${this.iconSize};">
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}

// Register the custom element with the browser
customElements.define('rux-icon-branding-watermark', RuxIconBrandingWatermark);
```