Okay, let's convert this Stencil.js component to LitElement.

The key differences will be:
1.  **Imports:** Using `LitElement`, `html` from `lit`, and `property` from `lit/decorators.js`.
2.  **Decorators:** `@Component` becomes extending `LitElement` and defining `static properties`. `@Prop` becomes `@property()`.
3.  **Rendering:** `h` (Stencil's JSX factory) is replaced by `html` tagged template literals from Lit.
4.  **Shadow DOM:** Stencil had `shadow: false`, meaning it renders directly into the light DOM. Lit components default to Shadow DOM. To replicate `shadow: false`, we'll override `createRenderRoot()`.
5.  **Registration:** Stencil automatically registers components. Lit requires an explicit `customElements.define()`.
6.  **SVG Import:** Assuming your build setup (like Webpack, Rollup, Vite) is configured to import `.svg` files as strings, the `import svgIcon` line should work similarly. Lit's `innerHTML` binding handles embedding the SVG string.

Here's the converted code:

```typescript
import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js'; // For the @property decorator
import svgIcon from '../../../icons/altitude.svg'; // Assumes your build system imports SVG files as strings

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

// /** @internal **/ // This comment is Stencil-specific and not directly applicable to LitElement
export class RuxIconAltitude extends LitElement {
    /**
     * Stencil's `shadow: false` means the component renders directly into its light DOM.
     * To replicate this in LitElement, we override `createRenderRoot` to return `this`.
     * If you want it to use Shadow DOM (Lit's default and generally recommended for encapsulation),
     * you can remove this method.
     */
    protected createRenderRoot(): Element | ShadowRoot {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    /**
     * Calculates the effective icon size based on predefined string values or a custom value.
     */
    protected get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    /**
     * Renders the component's HTML.
     */
    override render() {
        // Style object converted to a style string for direct binding.
        // Lit also supports `styleMap` directive for object-based styles if preferred.
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Lit uses `html` tagged template literals.
        // The `.innerHTML` binding sets the inner HTML of the div.
        return html`<div style="${style}" .innerHTML=${svgIcon}></div>`;
    }
}

// Stencil automatically registers components via the @Component decorator.
// LitElement requires explicit registration using customElements.define().
customElements.define('rux-icon-altitude', RuxIconAltitude);
```

**Key Changes and Explanations:**

1.  **`import { LitElement, html } from 'lit';`**: Core Lit imports.
2.  **`import { property } from 'lit/decorators.js';`**: Imports the `@property` decorator, which is Lit's equivalent of Stencil's `@Prop`.
3.  **`export class RuxIconAltitude extends LitElement {`**: The class now extends `LitElement`.
4.  **`protected createRenderRoot(): Element | ShadowRoot { return this; }`**: This is crucial for mimicking Stencil's `shadow: false`. By returning `this` (the host element itself), Lit will render directly into the component's light DOM instead of creating a Shadow DOM. If you *want* Shadow DOM for encapsulation, simply remove this method.
5.  **`@property({ type: String })`**: This decorator is used instead of `@Prop`. We specify `type: String` to ensure Lit correctly handles the property's observed attribute and reactivity.
6.  **`override render()`**: The `render` method is part of Lit's lifecycle. `override` keyword is good practice in TypeScript when overriding a base class method.
7.  **`html`<div style="${style}" .innerHTML=${svgIcon}></div>`**:
    *   `html` is the tagged template literal function.
    *   `style="${style}"`: Binds the `style` string to the `style` attribute of the `div`.
    *   `.innerHTML=${svgIcon}`: This is Lit's way of setting an element's `innerHTML` property. The dot `.` before `innerHTML` signifies a property binding (as opposed to an attribute binding).
8.  **`customElements.define('rux-icon-altitude', RuxIconAltitude);`**: This line explicitly registers your web component with the browser. Without it, the component won't work. Stencil's `@Component` decorator handles this behind the scenes.