To convert your Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil-specific imports (`Component`, `Prop`, `h`) with LitElement ones (`LitElement`, `html`, `css` (though not strictly needed here as you're using inline styles), and decorators from `lit/decorators.js`).
2.  **Component Decorator**: Replace `@Component` with `@customElement` and extend `LitElement`.
3.  **Properties**: Replace `@Prop()` with `@property()`.
4.  **Shadow DOM**: Stencil's `shadow: false` means rendering into the light DOM. In LitElement, the default is to render into the shadow DOM. To achieve the same light DOM rendering, you must override the `createRenderRoot()` method to return `this`. Be aware that `static styles` (Lit's way of scoping styles) will *not* work when rendering to the light DOM; only inline styles or global styles will apply.
5.  **Rendering**: Replace Stencil's JSX (`h`) syntax with Lit's `html` tagged template literals. Inline styles are applied directly using string interpolation. The `innerHTML` binding is handled via `.innerHTML`.

Here's the converted code:

```typescript
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import svgIcon from '../../../icons/alternate-email.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

// Stencil's @Component({ tag: 'rux-icon-alternate-email', shadow: false })
// is translated to LitElement by using @customElement and extending LitElement.
@customElement('rux-icon-alternate-email')
export class RuxIconAlternateEmail extends LitElement {
    // To replicate Stencil's `shadow: false` (rendering into the light DOM),
    // we override `createRenderRoot`. If you wanted a shadow DOM (Lit's default and generally recommended),
    // you would remove this method.
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    // Stencil's @Prop() is translated to Lit's @property()
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    // Stencil's render() with h() or JSX is translated to Lit's render() with html tagged template literal.
    render() {
        const height = this.iconSize;
        const width = this.iconSize;

        // Inline styles are applied directly.
        // `innerHTML` is bound using Lit's property binding syntax (`.innerHTML`).
        return html`
            <div style="height: ${height}; width: ${width};" .innerHTML="${svgIcon}"></div>
        `;
    }
}
```