Okay, let's convert this Stencil.js component to LitElement.

Here's the LitElement equivalent:

```typescript
import { LitElement, html, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';

// Assuming svgIcon is a string containing the SVG markup
// If svgIcon is a default export, you might need:
// import svgIcon from '../../../icons/arrow-downward.svg';
// If it's a raw string import, it's fine as is.
// For demonstration, let's assume it's directly available or imported as a string.
import svgIcon from '../../../icons/arrow-downward.svg'; // Your original import path

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-arrow-downward')
export class RuxIconArrowDownward extends LitElement {
    // LitElement components render to the light DOM by default if createRenderRoot is overridden
    // or if `this.shadowRoot = null` is set in the constructor.
    // However, the standard Lit way to prevent shadow DOM is to override `createRenderRoot`.
    // If you explicitly want no shadow DOM, uncomment the following:
    createRenderRoot() {
        return this;
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    // Instead of a getter that computes a style object, Lit typically uses a getter that
    // computes a CSS value, or directly applies styles in the template.
    // For dynamic styles, CSS custom properties are often a good choice.
    // However, to mimic your exact logic, we'll keep the `iconSize` getter.
    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large': '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // You can apply styles directly within the template using `style` attribute
        // or by binding to CSS custom properties.
        // Using `style` directly is fine for simple cases like this.
        return html`
            <div
                style="height: ${this.iconSize}; width: ${this.iconSize}; display: inline-block;"
            >
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}
```

### Key Changes and Explanations:

1.  **Imports:**
    *   `import { LitElement, html } from 'lit';`: Core Lit imports. `h` from Stencil is replaced by `html` template literal tag.
    *   `import { customElement, property } from 'lit/decorators.js';`: Decorators for defining the custom element and its properties.
    *   `import { unsafeHTML } from 'lit/directives/unsafe-html.js';`: Necessary for injecting raw SVG string safely. Stencil's `innerHTML` directly translates to Lit's `unsafeHTML` directive for security and proper rendering.

2.  **Component Definition:**
    *   `@Component` becomes `@customElement('rux-icon-arrow-downward')`.
    *   `export class RuxIconArrowDownward` extends `LitElement`.

3.  **No Shadow DOM (`shadow: false`):**
    *   In Stencil, `shadow: false` means the component renders to the light DOM.
    *   In LitElement, the default behavior is to render to the **shadow DOM**. To render to the light DOM, you need to override the `createRenderRoot()` method and return `this`. I've added this.

4.  **Properties (`@Prop`):**
    *   `@Prop()` becomes `@property({ type: String })`.
    *   The `type` option in `@property` is important for type conversion when attributes are set from HTML.

5.  **`render()` Method:**
    *   The `render()` method is similar, but instead of returning a `h()` call, it returns a `html` template literal.
    *   `style` object is directly applied as a string to the `style` attribute of the `div`.
    *   `innerHTML={svgIcon}` becomes `${unsafeHTML(svgIcon)}`. Remember to import `unsafeHTML`.
    *   I've added `display: inline-block;` to the `div` style. SVG elements are `inline` by default, and `height/width` properties often behave better with `block` or `inline-block` display, especially when set directly on a wrapper `div` like this.

6.  **`svgIcon` Import:**
    *   The import path `../../../icons/arrow-downward.svg` remains the same. Ensure your build setup (e.g., Webpack, Rollup, Vite) is configured to import `.svg` files as raw strings if that's how your Stencil project was handling it. If Stencil used an SVG loader that converted it to a JS object, you might need to adjust the import or the `unsafeHTML` usage. But typically, for icon SVGs, it's just the raw string.