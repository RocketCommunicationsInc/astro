To convert the Stencil.js component to LitElement, you'll need to make the following changes:

1.  **Imports**: Replace Stencil imports with LitElement imports.
2.  **Component Definition**: Extend `LitElement` and use `@customElement` decorator for the tag.
3.  **Properties**: Change `@Prop` to `@property` from `lit/decorators.js`.
4.  **Styling**: Lit components typically use `static styles = css\` for scoped styling. While the original used inline styles, we can integrate that or use CSS variables if preferred. For this direct translation, inline styles will work, but adding base styles with `static styles` is good practice.
5.  **Rendering**: Replace Stencil's `h` (JSX) with Lit's `html` tagged template literal. Use the `.` prefix for DOM properties like `innerHTML`.

Here's the converted LitElement code:

```typescript
import { LitElement, html, css } from 'lit';
import { property, customElement } from 'lit/decorators.js';
import svgIcon from '../../../icons/add-comment.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-add-comment')
export class RuxIconAddComment extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto';

    // LitElement's static styles for component-scoped CSS
    static styles = css`
        :host {
            display: inline-block; /* Ensures proper sizing and alignment for icons */
            box-sizing: border-box; /* Standard box model */
            vertical-align: middle; /* Helps align with text */
        }
        div {
            /* Ensure the SVG fills its container */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        div > svg {
            display: block; /* Remove extra space below inline elements */
            height: 100%;
            width: 100%;
        }
    `;

    get iconSize() {
        const sizes: { [key: string]: any } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        const style = `height: ${this.iconSize}; width: ${this.iconSize};`;

        // Lit uses .propertyName for setting DOM properties like innerHTML
        return html`<div style="${style}" .innerHTML="${svgIcon}"></div>`;
    }
}
```

### Key Changes Explained:

1.  **`import { LitElement, html, css } from 'lit';`**: Imports the base LitElement class, the `html` template literal function, and the `css` template literal function for styles.
2.  **`import { property, customElement } from 'lit/decorators.js';`**: Imports the decorators for defining properties and custom element tags.
3.  **`@customElement('rux-icon-add-comment')`**: This decorator automatically defines the custom element with the specified tag name, replacing Stencil's `@Component({ tag: ... })`.
4.  **`export class RuxIconAddComment extends LitElement {`**: Lit components extend `LitElement`.
5.  **`@property({ type: String })`**: Replaces Stencil's `@Prop()`. The `{ type: String }` option helps Lit correctly reflect the property to an attribute and handle its value.
6.  **`static styles = css\`...\``**: This is how Lit handles component-scoped CSS. The styles defined here will automatically be encapsulated within the component's Shadow DOM (Lit components use Shadow DOM by default, which is generally recommended for icons). I added some base styles for proper icon display.
7.  **`return html\`<div style="${style}" .innerHTML="${svgIcon}"></div>\`;`**:
    *   `html\`...\`` is Lit's way of defining the component's template.
    *   The `style` variable is embedded directly into the template string using `${}`.
    *   `.innerHTML="${svgIcon}"` is the Lit syntax for binding to a DOM property like `innerHTML`. The dot (`.`) prefix signifies a property binding.