To convert the Stencil.js component to LitElement, we need to:

1.  Replace Stencil's decorators (`@Component`, `@Prop`) with Lit's decorators (`@customElement`, `@property`).
2.  Change the base class from `LitElement`.
3.  Adjust the rendering logic from JSX (`h`) to Lit's `html` tagged template literal.
4.  Handle dynamic styles and `innerHTML` injection using Lit directives (`styleMap`, `unsafeHTML`).
5.  Address the `shadow: false` property from Stencil by overriding `createRenderRoot` in Lit to ensure light DOM rendering.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit'
import { customElement, property } from 'lit/decorators.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js'
import { styleMap } from 'lit/directives/style-map.js'

import svgIcon from '../../../icons/album.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
@customElement('rux-icon-album') // Maps Stencil's tag to Lit's customElement decorator
export class RuxIconAlbum extends LitElement {
    // Stencil's `shadow: false` means the component renders into the light DOM.
    // In Lit, components by default render into a shadow root. To achieve light DOM rendering,
    // we override `createRenderRoot` to return `this`.
    // Be aware that this means the component's internal styles (if any) could leak and it
    // can be affected by external styles.
    createRenderRoot(): HTMLElement {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String }) // Maps Stencil's @Prop to Lit's @property
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto'

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        // Use `styleMap` for dynamic CSS properties and `unsafeHTML` to inject the SVG string.
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`
    }
}
```