```typescript
import { LitElement, html, css } from 'lit';
import { property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { unsafeHTML } from 'lit/directives/unsafe-html.js';

import svgIcon from '../../../icons/360.svg';

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

// /** @internal **/ // This comment is specific to Stencil's internal documentation and can be removed.
export class RuxIcon360 extends LitElement {
    // In LitElement, the default is to use the Shadow DOM.
    // If 'shadow: false' from Stencil was crucial (i.e., component's internal structure needed to be light DOM accessible),
    // you would override createRenderRoot like this:
    // createRenderRoot() {
    //     return this;
    // }
    // However, for an icon component, Shadow DOM encapsulation is generally preferred for styling.

    /**
     * Define component styles using Lit's `css` tagged template literal.
     * This ensures styles are scoped to the component (within the Shadow DOM).
     */
    static styles = css`
        :host {
            display: inline-block; /* Ensures the icon behaves like an inline element but can have dimensions */
        }
        div {
            display: flex; /* Centers the SVG within the div */
            align-items: center;
            justify-content: center;
            /* The actual size will be set by inline style for dynamic sizing */
        }
        svg {
            display: block; /* Prevents extra space below the SVG */
            /* Ensure the SVG scales within its container if needed, though explicit width/height might override */
            max-width: 100%;
            max-height: 100%;
        }
    `;

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto';

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        };

        if (sizes[this.size]) {
            return sizes[this.size];
        } else {
            return this.size;
        }
    }

    render() {
        // Use Lit's `styleMap` directive for applying dynamic CSS properties.
        const dynamicStyles = {
            height: this.iconSize,
            width: this.iconSize,
        };

        // Use Lit's `html` tagged template literal for rendering.
        // `unsafeHTML` directive is used to inject raw SVG string into the DOM.
        // Be cautious with `unsafeHTML` if the source is not trusted, as it can lead to XSS vulnerabilities.
        // In this case, `svgIcon` is a static import, so it's safe.
        return html`
            <div style=${styleMap(dynamicStyles)}>
                ${unsafeHTML(svgIcon)}
            </div>
        `;
    }
}

// Define the custom element so it can be used in HTML.
// This usually goes at the end of the file or in a main entry point for a component library.
customElements.define('rux-icon-360', RuxIcon360);
```