```typescript
import { LitElement, html, css } from 'lit'
import { property } from 'lit/decorators.js'
import { styleMap } from 'lit/directives/style-map.js'
import svgIcon from '../../../icons/brightness-6.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 * /

/** @internal **/
export class RuxIconBrightness6 extends LitElement {
    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    @property({ type: String })
    size: 'extra-small' | 'small' | 'normal' | 'large' | 'auto' | string = 'auto'

    // Stencil's shadow: false means the component renders into its light DOM.
    // In Lit, the default is shadow DOM. To achieve light DOM, we override createRenderRoot.
    protected createRenderRoot(): Element | DocumentFragment {
        return this
    }

    get iconSize(): string {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    // Lit components often define their internal styling here if needed for the host element itself.
    // For this light DOM component, and since the size is applied to an internal div,
    // explicit host styles might not be necessary unless there's a default display needed.
    // We'll leave it empty for now, as the div handles the sizing.
    static styles = css``

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        return html`<div style=${styleMap(style)} .innerHTML=${svgIcon}></div>`
    }
}

// Define the custom element
declare global {
    interface HTMLElementTagNameMap {
        'rux-icon-brightness-6': RuxIconBrightness6
    }
}
customElements.define('rux-icon-brightness-6', RuxIconBrightness6)
```