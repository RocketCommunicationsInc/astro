To convert the Stencil.js component to LitElement, we need to:

1.  Replace Stencil's `@Component` and `@Prop` decorators with Lit's `LitElement`, `@property` decorator, and `html` template literal.
2.  Handle the `shadow: false` option from Stencil, which means the Lit component should render to the light DOM. This is done by implementing `static createRenderRoot() { return this; }`.
3.  Use Lit's `styleMap` directive for dynamic styles and `unsafeHTML` directive to inject the SVG string.
4.  Explicitly define the custom element tag using `customElements.define()`.

Here's the converted LitElement code:

```typescript
import { LitElement, html } from 'lit'
import { property } from 'lit/decorators.js'
import { unsafeHTML } from 'lit/directives/unsafe-html.js'
import { styleMap } from 'lit/directives/style-map.js'

import svgIcon from '../../../icons/add-circle.svg'

/**
 * WARNING: This is an autogenerated component.
 * Do not make any changes to this file or they will be overwritten on build.
 * The template for this file is located in the generate-icons.js util file.
 */

/** @internal **/
export class RuxIconAddCircle extends LitElement {
    // Stencil's `shadow: false` means the component renders to the light DOM.
    // In LitElement, this is achieved by overriding `createRenderRoot`.
    static createRenderRoot() {
        return this
    }

    /**
     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
     */
    // Stencil's @Prop is replaced by Lit's @property.
    // 'type: String' is used because the attribute value will be a string.
    @property({ type: String })
    size:
        | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string = 'auto'

    get iconSize() {
        const sizes: { [key: string]: string } = {
            'extra-small': '1rem',
            small: '2rem',
            normal: '3rem',
            large: '4rem',
        }

        if (sizes[this.size]) {
            return sizes[this.size]
        } else {
            return this.size
        }
    }

    render() {
        const style = {
            height: this.iconSize,
            width: this.iconSize,
        }

        // Stencil's `h()` function and JSX are replaced by Lit's `html` tagged template literal.
        // `style={style}` becomes `style=${styleMap(style)}` for dynamic styles.
        // `innerHTML={svgIcon}` becomes `${unsafeHTML(svgIcon)}` to inject raw HTML.
        return html`<div style=${styleMap(style)}>${unsafeHTML(svgIcon)}</div>`
    }
}

// Register the custom element. Stencil does this automatically from the `@Component` tag,
// but LitElement requires explicit registration.
customElements.define('rux-icon-add-circle', RuxIconAddCircle)
```